// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/ctuanle/sorapql/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Movie() MovieResolver
	People() PeopleResolver
	Query() QueryResolver
	TV() TVResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CreatedBy struct {
		CreditID    func(childComplexity int) int
		Gender      func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		ProfilePath func(childComplexity int) int
	}

	CreditCastItem struct {
		Adult              func(childComplexity int) int
		CastID             func(childComplexity int) int
		Character          func(childComplexity int) int
		CreditID           func(childComplexity int) int
		Gender             func(childComplexity int) int
		ID                 func(childComplexity int) int
		KnownForDepartment func(childComplexity int) int
		Name               func(childComplexity int) int
		Order              func(childComplexity int) int
		OriginalName       func(childComplexity int) int
		Popularity         func(childComplexity int) int
		ProfilePath        func(childComplexity int) int
	}

	CreditCrewItem struct {
		Adult              func(childComplexity int) int
		CreditID           func(childComplexity int) int
		Department         func(childComplexity int) int
		Gender             func(childComplexity int) int
		ID                 func(childComplexity int) int
		Job                func(childComplexity int) int
		KnownForDepartment func(childComplexity int) int
		Name               func(childComplexity int) int
		OriginalName       func(childComplexity int) int
		Popularity         func(childComplexity int) int
		ProfilePath        func(childComplexity int) int
	}

	Episode struct {
		AirDate        func(childComplexity int) int
		EpisodeNumber  func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Overview       func(childComplexity int) int
		ProductionCode func(childComplexity int) int
		SeasonNumber   func(childComplexity int) int
		StillPath      func(childComplexity int) int
		VoteAverage    func(childComplexity int) int
		VoteCount      func(childComplexity int) int
	}

	Genre struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	IMDBRating struct {
		Count func(childComplexity int) int
		Star  func(childComplexity int) int
	}

	ImageItem struct {
		AspectRatio func(childComplexity int) int
		FilePath    func(childComplexity int) int
		Height      func(childComplexity int) int
		Iso639_1    func(childComplexity int) int
		VoteAverage func(childComplexity int) int
		VoteCount   func(childComplexity int) int
		Width       func(childComplexity int) int
	}

	Introduction struct {
		Message func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	KnownForItem struct {
		Adult            func(childComplexity int) int
		BackdropPath     func(childComplexity int) int
		FirstAirDate     func(childComplexity int) int
		GenreIds         func(childComplexity int) int
		ID               func(childComplexity int) int
		MediaType        func(childComplexity int) int
		Name             func(childComplexity int) int
		OriginCountry    func(childComplexity int) int
		OriginalLanguage func(childComplexity int) int
		OriginalName     func(childComplexity int) int
		OriginalTitle    func(childComplexity int) int
		Overview         func(childComplexity int) int
		Popularity       func(childComplexity int) int
		PosterPath       func(childComplexity int) int
		ReleaseDate      func(childComplexity int) int
		Title            func(childComplexity int) int
		Video            func(childComplexity int) int
		VoteAverage      func(childComplexity int) int
		VoteCount        func(childComplexity int) int
	}

	MediaCredit struct {
		Cast func(childComplexity int) int
		Crew func(childComplexity int) int
	}

	MediaImages struct {
		Backdrops func(childComplexity int) int
		Posters   func(childComplexity int) int
	}

	MediaVideos struct {
		Results func(childComplexity int) int
	}

	Movie struct {
		Detail   func(childComplexity int, id int, language *string) int
		Popular  func(childComplexity int, page *int, language *string, region *string) int
		TopRated func(childComplexity int, page *int, language *string, region *string) int
		Upcoming func(childComplexity int, page *int, language *string, region *string) int
	}

	MovieDetail struct {
		Adult               func(childComplexity int) int
		BackdropPath        func(childComplexity int) int
		Budget              func(childComplexity int) int
		Credits             func(childComplexity int) int
		ExternalIds         func(childComplexity int) int
		Genres              func(childComplexity int) int
		Homepage            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		ImdbID              func(childComplexity int) int
		ImdbRating          func(childComplexity int) int
		OriginalLanguage    func(childComplexity int) int
		OriginalTitle       func(childComplexity int) int
		Overview            func(childComplexity int) int
		Popularity          func(childComplexity int) int
		PosterPath          func(childComplexity int) int
		ProductionCompanies func(childComplexity int) int
		ProductionCountries func(childComplexity int) int
		Recommendations     func(childComplexity int, page *int) int
		ReleaseDate         func(childComplexity int) int
		Revenue             func(childComplexity int) int
		Runtime             func(childComplexity int) int
		Similar             func(childComplexity int, page *int) int
		SpokenLanguages     func(childComplexity int) int
		Status              func(childComplexity int) int
		Tagline             func(childComplexity int) int
		Title               func(childComplexity int) int
		Video               func(childComplexity int) int
		Videos              func(childComplexity int) int
		VoteAverage         func(childComplexity int) int
		VoteCount           func(childComplexity int) int
	}

	MovieExternalIds struct {
		FacebookID  func(childComplexity int) int
		ImdbID      func(childComplexity int) int
		InstagramID func(childComplexity int) int
		TwitterID   func(childComplexity int) int
		WikidataID  func(childComplexity int) int
	}

	MovieList struct {
		Page         func(childComplexity int) int
		Results      func(childComplexity int) int
		TotalPages   func(childComplexity int) int
		TotalResults func(childComplexity int) int
	}

	MovieListItem struct {
		Adult            func(childComplexity int) int
		BackdropPath     func(childComplexity int) int
		GenreIds         func(childComplexity int) int
		ID               func(childComplexity int) int
		OriginalLanguage func(childComplexity int) int
		OriginalTitle    func(childComplexity int) int
		Overview         func(childComplexity int) int
		Popularity       func(childComplexity int) int
		PosterPath       func(childComplexity int) int
		ReleaseDate      func(childComplexity int) int
		Title            func(childComplexity int) int
		Video            func(childComplexity int) int
		VoteAverage      func(childComplexity int) int
		VoteCount        func(childComplexity int) int
	}

	Network struct {
		ID            func(childComplexity int) int
		LogoPath      func(childComplexity int) int
		Name          func(childComplexity int) int
		OriginCountry func(childComplexity int) int
	}

	People struct {
		Detail  func(childComplexity int, id int, language *string) int
		Popular func(childComplexity int, language *string, page *int) int
	}

	PersonCreditCast struct {
		Adult            func(childComplexity int) int
		BackdropPath     func(childComplexity int) int
		Character        func(childComplexity int) int
		CreditID         func(childComplexity int) int
		EpisodeCount     func(childComplexity int) int
		FirstAirDate     func(childComplexity int) int
		GenreIds         func(childComplexity int) int
		ID               func(childComplexity int) int
		MediaType        func(childComplexity int) int
		Name             func(childComplexity int) int
		OriginCountry    func(childComplexity int) int
		OriginalLanguage func(childComplexity int) int
		OriginalName     func(childComplexity int) int
		OriginalTitle    func(childComplexity int) int
		Overview         func(childComplexity int) int
		Popularity       func(childComplexity int) int
		PosterPath       func(childComplexity int) int
		ReleaseDate      func(childComplexity int) int
		Title            func(childComplexity int) int
		Video            func(childComplexity int) int
		VoteAverage      func(childComplexity int) int
		VoteCount        func(childComplexity int) int
	}

	PersonCreditCrew struct {
		Adult            func(childComplexity int) int
		BackdropPath     func(childComplexity int) int
		CreditID         func(childComplexity int) int
		Department       func(childComplexity int) int
		EpisodeCount     func(childComplexity int) int
		FirstAirDate     func(childComplexity int) int
		GenreIds         func(childComplexity int) int
		ID               func(childComplexity int) int
		Job              func(childComplexity int) int
		MediaType        func(childComplexity int) int
		Name             func(childComplexity int) int
		OriginCountry    func(childComplexity int) int
		OriginalLanguage func(childComplexity int) int
		OriginalName     func(childComplexity int) int
		OriginalTitle    func(childComplexity int) int
		Overview         func(childComplexity int) int
		Popularity       func(childComplexity int) int
		PosterPath       func(childComplexity int) int
		ReleaseDate      func(childComplexity int) int
		Title            func(childComplexity int) int
		Video            func(childComplexity int) int
		VoteAverage      func(childComplexity int) int
		VoteCount        func(childComplexity int) int
	}

	PersonCredits struct {
		Cast func(childComplexity int) int
		Crew func(childComplexity int) int
	}

	PersonDetail struct {
		Adult              func(childComplexity int) int
		AlsoKnownAs        func(childComplexity int) int
		Biography          func(childComplexity int) int
		Birthday           func(childComplexity int) int
		CombinedCredits    func(childComplexity int) int
		Deathday           func(childComplexity int) int
		ExternalIds        func(childComplexity int) int
		Gender             func(childComplexity int) int
		Homepage           func(childComplexity int) int
		ID                 func(childComplexity int) int
		Images             func(childComplexity int) int
		ImdbID             func(childComplexity int) int
		KnownForDepartment func(childComplexity int) int
		Name               func(childComplexity int) int
		PlaceOfBirth       func(childComplexity int) int
		Popularity         func(childComplexity int) int
		ProfilePath        func(childComplexity int) int
	}

	PersonExternalIds struct {
		FacebookID  func(childComplexity int) int
		FreebaseID  func(childComplexity int) int
		FreebaseMid func(childComplexity int) int
		ImdbID      func(childComplexity int) int
		InstagramID func(childComplexity int) int
		TvrageID    func(childComplexity int) int
		TwitterID   func(childComplexity int) int
	}

	PersonImages struct {
		Profiles func(childComplexity int) int
	}

	PopularPeople struct {
		Page         func(childComplexity int) int
		Results      func(childComplexity int) int
		TotalPages   func(childComplexity int) int
		TotalResults func(childComplexity int) int
	}

	PopularPerson struct {
		Adult       func(childComplexity int) int
		ID          func(childComplexity int) int
		KnownFor    func(childComplexity int) int
		Name        func(childComplexity int) int
		Popularity  func(childComplexity int) int
		ProfilePath func(childComplexity int) int
	}

	ProductionCompany struct {
		ID            func(childComplexity int) int
		LogoPath      func(childComplexity int) int
		Name          func(childComplexity int) int
		OriginCountry func(childComplexity int) int
	}

	ProductionCountry struct {
		Iso3166_1 func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	Query struct {
		Introduction func(childComplexity int) int
		Movie        func(childComplexity int) int
		People       func(childComplexity int) int
		Trending     func(childComplexity int, mediaType string, timeWindow string, page *int) int
		Tv           func(childComplexity int) int
	}

	Season struct {
		AirDate      func(childComplexity int) int
		EpisodeCount func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Overview     func(childComplexity int) int
		PosterPath   func(childComplexity int) int
		SeasonNumber func(childComplexity int) int
	}

	SpokenLanguage struct {
		EnglishName func(childComplexity int) int
		Iso639_1    func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	TV struct {
		Detail   func(childComplexity int, id int, language *string) int
		OnTheAir func(childComplexity int, page *int, language *string) int
		Popular  func(childComplexity int, page *int, language *string) int
		TopRated func(childComplexity int, page *int, language *string) int
	}

	TVDetail struct {
		BackdropPath        func(childComplexity int) int
		CreatedBy           func(childComplexity int) int
		Credits             func(childComplexity int) int
		EpisodeRuntime      func(childComplexity int) int
		ExternalIds         func(childComplexity int) int
		FirstAirDate        func(childComplexity int) int
		Genres              func(childComplexity int) int
		Homepage            func(childComplexity int) int
		ID                  func(childComplexity int) int
		Images              func(childComplexity int) int
		ImdbRating          func(childComplexity int) int
		InProduction        func(childComplexity int) int
		Languages           func(childComplexity int) int
		LastAirDate         func(childComplexity int) int
		LastEpisodeToAir    func(childComplexity int) int
		Name                func(childComplexity int) int
		Networks            func(childComplexity int) int
		NumberOfEpisodes    func(childComplexity int) int
		NumberOfSeasons     func(childComplexity int) int
		OriginCountry       func(childComplexity int) int
		OriginalLanguage    func(childComplexity int) int
		OriginalName        func(childComplexity int) int
		Overview            func(childComplexity int) int
		Popularity          func(childComplexity int) int
		PosterPath          func(childComplexity int) int
		ProductionCompanies func(childComplexity int) int
		ProductionCountries func(childComplexity int) int
		Recommendations     func(childComplexity int, page *int) int
		Seasons             func(childComplexity int) int
		Similar             func(childComplexity int, page *int) int
		SpokenLanguages     func(childComplexity int) int
		Status              func(childComplexity int) int
		Tagline             func(childComplexity int) int
		Type                func(childComplexity int) int
		Videos              func(childComplexity int) int
		VoteAverage         func(childComplexity int) int
		VoteCount           func(childComplexity int) int
	}

	TVExternalIds struct {
		FacebookID  func(childComplexity int) int
		FreebaseID  func(childComplexity int) int
		FreebaseMid func(childComplexity int) int
		ImdbID      func(childComplexity int) int
		InstagramID func(childComplexity int) int
		TvdbID      func(childComplexity int) int
		TvrageID    func(childComplexity int) int
		TwitterID   func(childComplexity int) int
	}

	TVList struct {
		Page         func(childComplexity int) int
		Results      func(childComplexity int) int
		TotalPages   func(childComplexity int) int
		TotalResults func(childComplexity int) int
	}

	TVListItem struct {
		BackdropPath     func(childComplexity int) int
		FirstAirDate     func(childComplexity int) int
		GenreIds         func(childComplexity int) int
		ID               func(childComplexity int) int
		Name             func(childComplexity int) int
		OriginCountry    func(childComplexity int) int
		OriginalLanguage func(childComplexity int) int
		OriginalName     func(childComplexity int) int
		Overview         func(childComplexity int) int
		Popularity       func(childComplexity int) int
		PosterPath       func(childComplexity int) int
		VoteAverage      func(childComplexity int) int
		VoteCount        func(childComplexity int) int
	}

	Trending struct {
		Page         func(childComplexity int) int
		Results      func(childComplexity int) int
		TotalPages   func(childComplexity int) int
		TotalResults func(childComplexity int) int
	}

	TrendingItem struct {
		Adult            func(childComplexity int) int
		BackdropPath     func(childComplexity int) int
		FirstAirDate     func(childComplexity int) int
		GenreIds         func(childComplexity int) int
		ID               func(childComplexity int) int
		Name             func(childComplexity int) int
		OriginCountry    func(childComplexity int) int
		OriginalLanguage func(childComplexity int) int
		OriginalName     func(childComplexity int) int
		OriginalTitle    func(childComplexity int) int
		Overview         func(childComplexity int) int
		Popularity       func(childComplexity int) int
		PosterPath       func(childComplexity int) int
		ReleaseDate      func(childComplexity int) int
		Title            func(childComplexity int) int
		Video            func(childComplexity int) int
		VoteAverage      func(childComplexity int) int
		VoteCount        func(childComplexity int) int
	}

	VideoItem struct {
		ID          func(childComplexity int) int
		Iso3166_1   func(childComplexity int) int
		Iso639_1    func(childComplexity int) int
		Key         func(childComplexity int) int
		Name        func(childComplexity int) int
		Official    func(childComplexity int) int
		PublishedAt func(childComplexity int) int
		Site        func(childComplexity int) int
		Size        func(childComplexity int) int
		Type        func(childComplexity int) int
	}
}

type MovieResolver interface {
	Detail(ctx context.Context, obj *model.Movie, id int, language *string) (*model.MovieDetail, error)
	Popular(ctx context.Context, obj *model.Movie, page *int, language *string, region *string) (*model.MovieList, error)
	TopRated(ctx context.Context, obj *model.Movie, page *int, language *string, region *string) (*model.MovieList, error)
	Upcoming(ctx context.Context, obj *model.Movie, page *int, language *string, region *string) (*model.MovieList, error)
}
type PeopleResolver interface {
	Detail(ctx context.Context, obj *model.People, id int, language *string) (*model.PersonDetail, error)
	Popular(ctx context.Context, obj *model.People, language *string, page *int) (*model.PopularPeople, error)
}
type QueryResolver interface {
	Introduction(ctx context.Context) (*model.Introduction, error)
	Movie(ctx context.Context) (*model.Movie, error)
	People(ctx context.Context) (*model.People, error)
	Trending(ctx context.Context, mediaType string, timeWindow string, page *int) (*model.Trending, error)
	Tv(ctx context.Context) (*model.Tv, error)
}
type TVResolver interface {
	Detail(ctx context.Context, obj *model.Tv, id int, language *string) (*model.TVDetail, error)
	Popular(ctx context.Context, obj *model.Tv, page *int, language *string) (*model.TVList, error)
	TopRated(ctx context.Context, obj *model.Tv, page *int, language *string) (*model.TVList, error)
	OnTheAir(ctx context.Context, obj *model.Tv, page *int, language *string) (*model.TVList, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "CreatedBy.credit_id":
		if e.complexity.CreatedBy.CreditID == nil {
			break
		}

		return e.complexity.CreatedBy.CreditID(childComplexity), true

	case "CreatedBy.gender":
		if e.complexity.CreatedBy.Gender == nil {
			break
		}

		return e.complexity.CreatedBy.Gender(childComplexity), true

	case "CreatedBy.id":
		if e.complexity.CreatedBy.ID == nil {
			break
		}

		return e.complexity.CreatedBy.ID(childComplexity), true

	case "CreatedBy.name":
		if e.complexity.CreatedBy.Name == nil {
			break
		}

		return e.complexity.CreatedBy.Name(childComplexity), true

	case "CreatedBy.profile_path":
		if e.complexity.CreatedBy.ProfilePath == nil {
			break
		}

		return e.complexity.CreatedBy.ProfilePath(childComplexity), true

	case "CreditCastItem.adult":
		if e.complexity.CreditCastItem.Adult == nil {
			break
		}

		return e.complexity.CreditCastItem.Adult(childComplexity), true

	case "CreditCastItem.cast_id":
		if e.complexity.CreditCastItem.CastID == nil {
			break
		}

		return e.complexity.CreditCastItem.CastID(childComplexity), true

	case "CreditCastItem.character":
		if e.complexity.CreditCastItem.Character == nil {
			break
		}

		return e.complexity.CreditCastItem.Character(childComplexity), true

	case "CreditCastItem.credit_id":
		if e.complexity.CreditCastItem.CreditID == nil {
			break
		}

		return e.complexity.CreditCastItem.CreditID(childComplexity), true

	case "CreditCastItem.gender":
		if e.complexity.CreditCastItem.Gender == nil {
			break
		}

		return e.complexity.CreditCastItem.Gender(childComplexity), true

	case "CreditCastItem.id":
		if e.complexity.CreditCastItem.ID == nil {
			break
		}

		return e.complexity.CreditCastItem.ID(childComplexity), true

	case "CreditCastItem.known_for_department":
		if e.complexity.CreditCastItem.KnownForDepartment == nil {
			break
		}

		return e.complexity.CreditCastItem.KnownForDepartment(childComplexity), true

	case "CreditCastItem.name":
		if e.complexity.CreditCastItem.Name == nil {
			break
		}

		return e.complexity.CreditCastItem.Name(childComplexity), true

	case "CreditCastItem.order":
		if e.complexity.CreditCastItem.Order == nil {
			break
		}

		return e.complexity.CreditCastItem.Order(childComplexity), true

	case "CreditCastItem.original_name":
		if e.complexity.CreditCastItem.OriginalName == nil {
			break
		}

		return e.complexity.CreditCastItem.OriginalName(childComplexity), true

	case "CreditCastItem.popularity":
		if e.complexity.CreditCastItem.Popularity == nil {
			break
		}

		return e.complexity.CreditCastItem.Popularity(childComplexity), true

	case "CreditCastItem.profile_path":
		if e.complexity.CreditCastItem.ProfilePath == nil {
			break
		}

		return e.complexity.CreditCastItem.ProfilePath(childComplexity), true

	case "CreditCrewItem.adult":
		if e.complexity.CreditCrewItem.Adult == nil {
			break
		}

		return e.complexity.CreditCrewItem.Adult(childComplexity), true

	case "CreditCrewItem.credit_id":
		if e.complexity.CreditCrewItem.CreditID == nil {
			break
		}

		return e.complexity.CreditCrewItem.CreditID(childComplexity), true

	case "CreditCrewItem.department":
		if e.complexity.CreditCrewItem.Department == nil {
			break
		}

		return e.complexity.CreditCrewItem.Department(childComplexity), true

	case "CreditCrewItem.gender":
		if e.complexity.CreditCrewItem.Gender == nil {
			break
		}

		return e.complexity.CreditCrewItem.Gender(childComplexity), true

	case "CreditCrewItem.id":
		if e.complexity.CreditCrewItem.ID == nil {
			break
		}

		return e.complexity.CreditCrewItem.ID(childComplexity), true

	case "CreditCrewItem.job":
		if e.complexity.CreditCrewItem.Job == nil {
			break
		}

		return e.complexity.CreditCrewItem.Job(childComplexity), true

	case "CreditCrewItem.known_for_department":
		if e.complexity.CreditCrewItem.KnownForDepartment == nil {
			break
		}

		return e.complexity.CreditCrewItem.KnownForDepartment(childComplexity), true

	case "CreditCrewItem.name":
		if e.complexity.CreditCrewItem.Name == nil {
			break
		}

		return e.complexity.CreditCrewItem.Name(childComplexity), true

	case "CreditCrewItem.original_name":
		if e.complexity.CreditCrewItem.OriginalName == nil {
			break
		}

		return e.complexity.CreditCrewItem.OriginalName(childComplexity), true

	case "CreditCrewItem.popularity":
		if e.complexity.CreditCrewItem.Popularity == nil {
			break
		}

		return e.complexity.CreditCrewItem.Popularity(childComplexity), true

	case "CreditCrewItem.profile_path":
		if e.complexity.CreditCrewItem.ProfilePath == nil {
			break
		}

		return e.complexity.CreditCrewItem.ProfilePath(childComplexity), true

	case "Episode.air_date":
		if e.complexity.Episode.AirDate == nil {
			break
		}

		return e.complexity.Episode.AirDate(childComplexity), true

	case "Episode.episode_number":
		if e.complexity.Episode.EpisodeNumber == nil {
			break
		}

		return e.complexity.Episode.EpisodeNumber(childComplexity), true

	case "Episode.id":
		if e.complexity.Episode.ID == nil {
			break
		}

		return e.complexity.Episode.ID(childComplexity), true

	case "Episode.name":
		if e.complexity.Episode.Name == nil {
			break
		}

		return e.complexity.Episode.Name(childComplexity), true

	case "Episode.overview":
		if e.complexity.Episode.Overview == nil {
			break
		}

		return e.complexity.Episode.Overview(childComplexity), true

	case "Episode.production_code":
		if e.complexity.Episode.ProductionCode == nil {
			break
		}

		return e.complexity.Episode.ProductionCode(childComplexity), true

	case "Episode.season_number":
		if e.complexity.Episode.SeasonNumber == nil {
			break
		}

		return e.complexity.Episode.SeasonNumber(childComplexity), true

	case "Episode.still_path":
		if e.complexity.Episode.StillPath == nil {
			break
		}

		return e.complexity.Episode.StillPath(childComplexity), true

	case "Episode.vote_average":
		if e.complexity.Episode.VoteAverage == nil {
			break
		}

		return e.complexity.Episode.VoteAverage(childComplexity), true

	case "Episode.vote_count":
		if e.complexity.Episode.VoteCount == nil {
			break
		}

		return e.complexity.Episode.VoteCount(childComplexity), true

	case "Genre.id":
		if e.complexity.Genre.ID == nil {
			break
		}

		return e.complexity.Genre.ID(childComplexity), true

	case "Genre.name":
		if e.complexity.Genre.Name == nil {
			break
		}

		return e.complexity.Genre.Name(childComplexity), true

	case "IMDBRating.count":
		if e.complexity.IMDBRating.Count == nil {
			break
		}

		return e.complexity.IMDBRating.Count(childComplexity), true

	case "IMDBRating.star":
		if e.complexity.IMDBRating.Star == nil {
			break
		}

		return e.complexity.IMDBRating.Star(childComplexity), true

	case "ImageItem.aspect_ratio":
		if e.complexity.ImageItem.AspectRatio == nil {
			break
		}

		return e.complexity.ImageItem.AspectRatio(childComplexity), true

	case "ImageItem.file_path":
		if e.complexity.ImageItem.FilePath == nil {
			break
		}

		return e.complexity.ImageItem.FilePath(childComplexity), true

	case "ImageItem.height":
		if e.complexity.ImageItem.Height == nil {
			break
		}

		return e.complexity.ImageItem.Height(childComplexity), true

	case "ImageItem.iso_639_1":
		if e.complexity.ImageItem.Iso639_1 == nil {
			break
		}

		return e.complexity.ImageItem.Iso639_1(childComplexity), true

	case "ImageItem.vote_average":
		if e.complexity.ImageItem.VoteAverage == nil {
			break
		}

		return e.complexity.ImageItem.VoteAverage(childComplexity), true

	case "ImageItem.vote_count":
		if e.complexity.ImageItem.VoteCount == nil {
			break
		}

		return e.complexity.ImageItem.VoteCount(childComplexity), true

	case "ImageItem.width":
		if e.complexity.ImageItem.Width == nil {
			break
		}

		return e.complexity.ImageItem.Width(childComplexity), true

	case "Introduction.Message":
		if e.complexity.Introduction.Message == nil {
			break
		}

		return e.complexity.Introduction.Message(childComplexity), true

	case "Introduction.Name":
		if e.complexity.Introduction.Name == nil {
			break
		}

		return e.complexity.Introduction.Name(childComplexity), true

	case "KnownForItem.adult":
		if e.complexity.KnownForItem.Adult == nil {
			break
		}

		return e.complexity.KnownForItem.Adult(childComplexity), true

	case "KnownForItem.backdrop_path":
		if e.complexity.KnownForItem.BackdropPath == nil {
			break
		}

		return e.complexity.KnownForItem.BackdropPath(childComplexity), true

	case "KnownForItem.first_air_date":
		if e.complexity.KnownForItem.FirstAirDate == nil {
			break
		}

		return e.complexity.KnownForItem.FirstAirDate(childComplexity), true

	case "KnownForItem.genre_ids":
		if e.complexity.KnownForItem.GenreIds == nil {
			break
		}

		return e.complexity.KnownForItem.GenreIds(childComplexity), true

	case "KnownForItem.id":
		if e.complexity.KnownForItem.ID == nil {
			break
		}

		return e.complexity.KnownForItem.ID(childComplexity), true

	case "KnownForItem.media_type":
		if e.complexity.KnownForItem.MediaType == nil {
			break
		}

		return e.complexity.KnownForItem.MediaType(childComplexity), true

	case "KnownForItem.name":
		if e.complexity.KnownForItem.Name == nil {
			break
		}

		return e.complexity.KnownForItem.Name(childComplexity), true

	case "KnownForItem.origin_country":
		if e.complexity.KnownForItem.OriginCountry == nil {
			break
		}

		return e.complexity.KnownForItem.OriginCountry(childComplexity), true

	case "KnownForItem.original_language":
		if e.complexity.KnownForItem.OriginalLanguage == nil {
			break
		}

		return e.complexity.KnownForItem.OriginalLanguage(childComplexity), true

	case "KnownForItem.original_name":
		if e.complexity.KnownForItem.OriginalName == nil {
			break
		}

		return e.complexity.KnownForItem.OriginalName(childComplexity), true

	case "KnownForItem.original_title":
		if e.complexity.KnownForItem.OriginalTitle == nil {
			break
		}

		return e.complexity.KnownForItem.OriginalTitle(childComplexity), true

	case "KnownForItem.overview":
		if e.complexity.KnownForItem.Overview == nil {
			break
		}

		return e.complexity.KnownForItem.Overview(childComplexity), true

	case "KnownForItem.popularity":
		if e.complexity.KnownForItem.Popularity == nil {
			break
		}

		return e.complexity.KnownForItem.Popularity(childComplexity), true

	case "KnownForItem.poster_path":
		if e.complexity.KnownForItem.PosterPath == nil {
			break
		}

		return e.complexity.KnownForItem.PosterPath(childComplexity), true

	case "KnownForItem.release_date":
		if e.complexity.KnownForItem.ReleaseDate == nil {
			break
		}

		return e.complexity.KnownForItem.ReleaseDate(childComplexity), true

	case "KnownForItem.title":
		if e.complexity.KnownForItem.Title == nil {
			break
		}

		return e.complexity.KnownForItem.Title(childComplexity), true

	case "KnownForItem.video":
		if e.complexity.KnownForItem.Video == nil {
			break
		}

		return e.complexity.KnownForItem.Video(childComplexity), true

	case "KnownForItem.vote_average":
		if e.complexity.KnownForItem.VoteAverage == nil {
			break
		}

		return e.complexity.KnownForItem.VoteAverage(childComplexity), true

	case "KnownForItem.vote_count":
		if e.complexity.KnownForItem.VoteCount == nil {
			break
		}

		return e.complexity.KnownForItem.VoteCount(childComplexity), true

	case "MediaCredit.cast":
		if e.complexity.MediaCredit.Cast == nil {
			break
		}

		return e.complexity.MediaCredit.Cast(childComplexity), true

	case "MediaCredit.crew":
		if e.complexity.MediaCredit.Crew == nil {
			break
		}

		return e.complexity.MediaCredit.Crew(childComplexity), true

	case "MediaImages.backdrops":
		if e.complexity.MediaImages.Backdrops == nil {
			break
		}

		return e.complexity.MediaImages.Backdrops(childComplexity), true

	case "MediaImages.posters":
		if e.complexity.MediaImages.Posters == nil {
			break
		}

		return e.complexity.MediaImages.Posters(childComplexity), true

	case "MediaVideos.results":
		if e.complexity.MediaVideos.Results == nil {
			break
		}

		return e.complexity.MediaVideos.Results(childComplexity), true

	case "Movie.detail":
		if e.complexity.Movie.Detail == nil {
			break
		}

		args, err := ec.field_Movie_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Movie.Detail(childComplexity, args["id"].(int), args["language"].(*string)), true

	case "Movie.popular":
		if e.complexity.Movie.Popular == nil {
			break
		}

		args, err := ec.field_Movie_popular_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Movie.Popular(childComplexity, args["page"].(*int), args["language"].(*string), args["region"].(*string)), true

	case "Movie.top_rated":
		if e.complexity.Movie.TopRated == nil {
			break
		}

		args, err := ec.field_Movie_top_rated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Movie.TopRated(childComplexity, args["page"].(*int), args["language"].(*string), args["region"].(*string)), true

	case "Movie.upcoming":
		if e.complexity.Movie.Upcoming == nil {
			break
		}

		args, err := ec.field_Movie_upcoming_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Movie.Upcoming(childComplexity, args["page"].(*int), args["language"].(*string), args["region"].(*string)), true

	case "MovieDetail.adult":
		if e.complexity.MovieDetail.Adult == nil {
			break
		}

		return e.complexity.MovieDetail.Adult(childComplexity), true

	case "MovieDetail.backdrop_path":
		if e.complexity.MovieDetail.BackdropPath == nil {
			break
		}

		return e.complexity.MovieDetail.BackdropPath(childComplexity), true

	case "MovieDetail.budget":
		if e.complexity.MovieDetail.Budget == nil {
			break
		}

		return e.complexity.MovieDetail.Budget(childComplexity), true

	case "MovieDetail.credits":
		if e.complexity.MovieDetail.Credits == nil {
			break
		}

		return e.complexity.MovieDetail.Credits(childComplexity), true

	case "MovieDetail.external_ids":
		if e.complexity.MovieDetail.ExternalIds == nil {
			break
		}

		return e.complexity.MovieDetail.ExternalIds(childComplexity), true

	case "MovieDetail.genres":
		if e.complexity.MovieDetail.Genres == nil {
			break
		}

		return e.complexity.MovieDetail.Genres(childComplexity), true

	case "MovieDetail.homepage":
		if e.complexity.MovieDetail.Homepage == nil {
			break
		}

		return e.complexity.MovieDetail.Homepage(childComplexity), true

	case "MovieDetail.id":
		if e.complexity.MovieDetail.ID == nil {
			break
		}

		return e.complexity.MovieDetail.ID(childComplexity), true

	case "MovieDetail.images":
		if e.complexity.MovieDetail.Images == nil {
			break
		}

		return e.complexity.MovieDetail.Images(childComplexity), true

	case "MovieDetail.imdb_id":
		if e.complexity.MovieDetail.ImdbID == nil {
			break
		}

		return e.complexity.MovieDetail.ImdbID(childComplexity), true

	case "MovieDetail.imdb_rating":
		if e.complexity.MovieDetail.ImdbRating == nil {
			break
		}

		return e.complexity.MovieDetail.ImdbRating(childComplexity), true

	case "MovieDetail.original_language":
		if e.complexity.MovieDetail.OriginalLanguage == nil {
			break
		}

		return e.complexity.MovieDetail.OriginalLanguage(childComplexity), true

	case "MovieDetail.original_title":
		if e.complexity.MovieDetail.OriginalTitle == nil {
			break
		}

		return e.complexity.MovieDetail.OriginalTitle(childComplexity), true

	case "MovieDetail.overview":
		if e.complexity.MovieDetail.Overview == nil {
			break
		}

		return e.complexity.MovieDetail.Overview(childComplexity), true

	case "MovieDetail.popularity":
		if e.complexity.MovieDetail.Popularity == nil {
			break
		}

		return e.complexity.MovieDetail.Popularity(childComplexity), true

	case "MovieDetail.poster_path":
		if e.complexity.MovieDetail.PosterPath == nil {
			break
		}

		return e.complexity.MovieDetail.PosterPath(childComplexity), true

	case "MovieDetail.production_companies":
		if e.complexity.MovieDetail.ProductionCompanies == nil {
			break
		}

		return e.complexity.MovieDetail.ProductionCompanies(childComplexity), true

	case "MovieDetail.production_countries":
		if e.complexity.MovieDetail.ProductionCountries == nil {
			break
		}

		return e.complexity.MovieDetail.ProductionCountries(childComplexity), true

	case "MovieDetail.recommendations":
		if e.complexity.MovieDetail.Recommendations == nil {
			break
		}

		args, err := ec.field_MovieDetail_recommendations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MovieDetail.Recommendations(childComplexity, args["page"].(*int)), true

	case "MovieDetail.release_date":
		if e.complexity.MovieDetail.ReleaseDate == nil {
			break
		}

		return e.complexity.MovieDetail.ReleaseDate(childComplexity), true

	case "MovieDetail.revenue":
		if e.complexity.MovieDetail.Revenue == nil {
			break
		}

		return e.complexity.MovieDetail.Revenue(childComplexity), true

	case "MovieDetail.runtime":
		if e.complexity.MovieDetail.Runtime == nil {
			break
		}

		return e.complexity.MovieDetail.Runtime(childComplexity), true

	case "MovieDetail.similar":
		if e.complexity.MovieDetail.Similar == nil {
			break
		}

		args, err := ec.field_MovieDetail_similar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.MovieDetail.Similar(childComplexity, args["page"].(*int)), true

	case "MovieDetail.spoken_languages":
		if e.complexity.MovieDetail.SpokenLanguages == nil {
			break
		}

		return e.complexity.MovieDetail.SpokenLanguages(childComplexity), true

	case "MovieDetail.status":
		if e.complexity.MovieDetail.Status == nil {
			break
		}

		return e.complexity.MovieDetail.Status(childComplexity), true

	case "MovieDetail.tagline":
		if e.complexity.MovieDetail.Tagline == nil {
			break
		}

		return e.complexity.MovieDetail.Tagline(childComplexity), true

	case "MovieDetail.title":
		if e.complexity.MovieDetail.Title == nil {
			break
		}

		return e.complexity.MovieDetail.Title(childComplexity), true

	case "MovieDetail.video":
		if e.complexity.MovieDetail.Video == nil {
			break
		}

		return e.complexity.MovieDetail.Video(childComplexity), true

	case "MovieDetail.videos":
		if e.complexity.MovieDetail.Videos == nil {
			break
		}

		return e.complexity.MovieDetail.Videos(childComplexity), true

	case "MovieDetail.vote_average":
		if e.complexity.MovieDetail.VoteAverage == nil {
			break
		}

		return e.complexity.MovieDetail.VoteAverage(childComplexity), true

	case "MovieDetail.vote_count":
		if e.complexity.MovieDetail.VoteCount == nil {
			break
		}

		return e.complexity.MovieDetail.VoteCount(childComplexity), true

	case "MovieExternalIds.facebook_id":
		if e.complexity.MovieExternalIds.FacebookID == nil {
			break
		}

		return e.complexity.MovieExternalIds.FacebookID(childComplexity), true

	case "MovieExternalIds.imdb_id":
		if e.complexity.MovieExternalIds.ImdbID == nil {
			break
		}

		return e.complexity.MovieExternalIds.ImdbID(childComplexity), true

	case "MovieExternalIds.instagram_id":
		if e.complexity.MovieExternalIds.InstagramID == nil {
			break
		}

		return e.complexity.MovieExternalIds.InstagramID(childComplexity), true

	case "MovieExternalIds.twitter_id":
		if e.complexity.MovieExternalIds.TwitterID == nil {
			break
		}

		return e.complexity.MovieExternalIds.TwitterID(childComplexity), true

	case "MovieExternalIds.wikidata_id":
		if e.complexity.MovieExternalIds.WikidataID == nil {
			break
		}

		return e.complexity.MovieExternalIds.WikidataID(childComplexity), true

	case "MovieList.page":
		if e.complexity.MovieList.Page == nil {
			break
		}

		return e.complexity.MovieList.Page(childComplexity), true

	case "MovieList.results":
		if e.complexity.MovieList.Results == nil {
			break
		}

		return e.complexity.MovieList.Results(childComplexity), true

	case "MovieList.total_pages":
		if e.complexity.MovieList.TotalPages == nil {
			break
		}

		return e.complexity.MovieList.TotalPages(childComplexity), true

	case "MovieList.total_results":
		if e.complexity.MovieList.TotalResults == nil {
			break
		}

		return e.complexity.MovieList.TotalResults(childComplexity), true

	case "MovieListItem.adult":
		if e.complexity.MovieListItem.Adult == nil {
			break
		}

		return e.complexity.MovieListItem.Adult(childComplexity), true

	case "MovieListItem.backdrop_path":
		if e.complexity.MovieListItem.BackdropPath == nil {
			break
		}

		return e.complexity.MovieListItem.BackdropPath(childComplexity), true

	case "MovieListItem.genre_ids":
		if e.complexity.MovieListItem.GenreIds == nil {
			break
		}

		return e.complexity.MovieListItem.GenreIds(childComplexity), true

	case "MovieListItem.id":
		if e.complexity.MovieListItem.ID == nil {
			break
		}

		return e.complexity.MovieListItem.ID(childComplexity), true

	case "MovieListItem.original_language":
		if e.complexity.MovieListItem.OriginalLanguage == nil {
			break
		}

		return e.complexity.MovieListItem.OriginalLanguage(childComplexity), true

	case "MovieListItem.original_title":
		if e.complexity.MovieListItem.OriginalTitle == nil {
			break
		}

		return e.complexity.MovieListItem.OriginalTitle(childComplexity), true

	case "MovieListItem.overview":
		if e.complexity.MovieListItem.Overview == nil {
			break
		}

		return e.complexity.MovieListItem.Overview(childComplexity), true

	case "MovieListItem.popularity":
		if e.complexity.MovieListItem.Popularity == nil {
			break
		}

		return e.complexity.MovieListItem.Popularity(childComplexity), true

	case "MovieListItem.poster_path":
		if e.complexity.MovieListItem.PosterPath == nil {
			break
		}

		return e.complexity.MovieListItem.PosterPath(childComplexity), true

	case "MovieListItem.release_date":
		if e.complexity.MovieListItem.ReleaseDate == nil {
			break
		}

		return e.complexity.MovieListItem.ReleaseDate(childComplexity), true

	case "MovieListItem.title":
		if e.complexity.MovieListItem.Title == nil {
			break
		}

		return e.complexity.MovieListItem.Title(childComplexity), true

	case "MovieListItem.video":
		if e.complexity.MovieListItem.Video == nil {
			break
		}

		return e.complexity.MovieListItem.Video(childComplexity), true

	case "MovieListItem.vote_average":
		if e.complexity.MovieListItem.VoteAverage == nil {
			break
		}

		return e.complexity.MovieListItem.VoteAverage(childComplexity), true

	case "MovieListItem.vote_count":
		if e.complexity.MovieListItem.VoteCount == nil {
			break
		}

		return e.complexity.MovieListItem.VoteCount(childComplexity), true

	case "Network.id":
		if e.complexity.Network.ID == nil {
			break
		}

		return e.complexity.Network.ID(childComplexity), true

	case "Network.logo_path":
		if e.complexity.Network.LogoPath == nil {
			break
		}

		return e.complexity.Network.LogoPath(childComplexity), true

	case "Network.name":
		if e.complexity.Network.Name == nil {
			break
		}

		return e.complexity.Network.Name(childComplexity), true

	case "Network.origin_country":
		if e.complexity.Network.OriginCountry == nil {
			break
		}

		return e.complexity.Network.OriginCountry(childComplexity), true

	case "People.detail":
		if e.complexity.People.Detail == nil {
			break
		}

		args, err := ec.field_People_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.People.Detail(childComplexity, args["id"].(int), args["language"].(*string)), true

	case "People.popular":
		if e.complexity.People.Popular == nil {
			break
		}

		args, err := ec.field_People_popular_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.People.Popular(childComplexity, args["language"].(*string), args["page"].(*int)), true

	case "PersonCreditCast.adult":
		if e.complexity.PersonCreditCast.Adult == nil {
			break
		}

		return e.complexity.PersonCreditCast.Adult(childComplexity), true

	case "PersonCreditCast.backdrop_path":
		if e.complexity.PersonCreditCast.BackdropPath == nil {
			break
		}

		return e.complexity.PersonCreditCast.BackdropPath(childComplexity), true

	case "PersonCreditCast.character":
		if e.complexity.PersonCreditCast.Character == nil {
			break
		}

		return e.complexity.PersonCreditCast.Character(childComplexity), true

	case "PersonCreditCast.credit_id":
		if e.complexity.PersonCreditCast.CreditID == nil {
			break
		}

		return e.complexity.PersonCreditCast.CreditID(childComplexity), true

	case "PersonCreditCast.episode_count":
		if e.complexity.PersonCreditCast.EpisodeCount == nil {
			break
		}

		return e.complexity.PersonCreditCast.EpisodeCount(childComplexity), true

	case "PersonCreditCast.first_air_date":
		if e.complexity.PersonCreditCast.FirstAirDate == nil {
			break
		}

		return e.complexity.PersonCreditCast.FirstAirDate(childComplexity), true

	case "PersonCreditCast.genre_ids":
		if e.complexity.PersonCreditCast.GenreIds == nil {
			break
		}

		return e.complexity.PersonCreditCast.GenreIds(childComplexity), true

	case "PersonCreditCast.id":
		if e.complexity.PersonCreditCast.ID == nil {
			break
		}

		return e.complexity.PersonCreditCast.ID(childComplexity), true

	case "PersonCreditCast.media_type":
		if e.complexity.PersonCreditCast.MediaType == nil {
			break
		}

		return e.complexity.PersonCreditCast.MediaType(childComplexity), true

	case "PersonCreditCast.name":
		if e.complexity.PersonCreditCast.Name == nil {
			break
		}

		return e.complexity.PersonCreditCast.Name(childComplexity), true

	case "PersonCreditCast.origin_country":
		if e.complexity.PersonCreditCast.OriginCountry == nil {
			break
		}

		return e.complexity.PersonCreditCast.OriginCountry(childComplexity), true

	case "PersonCreditCast.original_language":
		if e.complexity.PersonCreditCast.OriginalLanguage == nil {
			break
		}

		return e.complexity.PersonCreditCast.OriginalLanguage(childComplexity), true

	case "PersonCreditCast.original_name":
		if e.complexity.PersonCreditCast.OriginalName == nil {
			break
		}

		return e.complexity.PersonCreditCast.OriginalName(childComplexity), true

	case "PersonCreditCast.original_title":
		if e.complexity.PersonCreditCast.OriginalTitle == nil {
			break
		}

		return e.complexity.PersonCreditCast.OriginalTitle(childComplexity), true

	case "PersonCreditCast.overview":
		if e.complexity.PersonCreditCast.Overview == nil {
			break
		}

		return e.complexity.PersonCreditCast.Overview(childComplexity), true

	case "PersonCreditCast.popularity":
		if e.complexity.PersonCreditCast.Popularity == nil {
			break
		}

		return e.complexity.PersonCreditCast.Popularity(childComplexity), true

	case "PersonCreditCast.poster_path":
		if e.complexity.PersonCreditCast.PosterPath == nil {
			break
		}

		return e.complexity.PersonCreditCast.PosterPath(childComplexity), true

	case "PersonCreditCast.release_date":
		if e.complexity.PersonCreditCast.ReleaseDate == nil {
			break
		}

		return e.complexity.PersonCreditCast.ReleaseDate(childComplexity), true

	case "PersonCreditCast.title":
		if e.complexity.PersonCreditCast.Title == nil {
			break
		}

		return e.complexity.PersonCreditCast.Title(childComplexity), true

	case "PersonCreditCast.video":
		if e.complexity.PersonCreditCast.Video == nil {
			break
		}

		return e.complexity.PersonCreditCast.Video(childComplexity), true

	case "PersonCreditCast.vote_average":
		if e.complexity.PersonCreditCast.VoteAverage == nil {
			break
		}

		return e.complexity.PersonCreditCast.VoteAverage(childComplexity), true

	case "PersonCreditCast.vote_count":
		if e.complexity.PersonCreditCast.VoteCount == nil {
			break
		}

		return e.complexity.PersonCreditCast.VoteCount(childComplexity), true

	case "PersonCreditCrew.adult":
		if e.complexity.PersonCreditCrew.Adult == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Adult(childComplexity), true

	case "PersonCreditCrew.backdrop_path":
		if e.complexity.PersonCreditCrew.BackdropPath == nil {
			break
		}

		return e.complexity.PersonCreditCrew.BackdropPath(childComplexity), true

	case "PersonCreditCrew.credit_id":
		if e.complexity.PersonCreditCrew.CreditID == nil {
			break
		}

		return e.complexity.PersonCreditCrew.CreditID(childComplexity), true

	case "PersonCreditCrew.department":
		if e.complexity.PersonCreditCrew.Department == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Department(childComplexity), true

	case "PersonCreditCrew.episode_count":
		if e.complexity.PersonCreditCrew.EpisodeCount == nil {
			break
		}

		return e.complexity.PersonCreditCrew.EpisodeCount(childComplexity), true

	case "PersonCreditCrew.first_air_date":
		if e.complexity.PersonCreditCrew.FirstAirDate == nil {
			break
		}

		return e.complexity.PersonCreditCrew.FirstAirDate(childComplexity), true

	case "PersonCreditCrew.genre_ids":
		if e.complexity.PersonCreditCrew.GenreIds == nil {
			break
		}

		return e.complexity.PersonCreditCrew.GenreIds(childComplexity), true

	case "PersonCreditCrew.id":
		if e.complexity.PersonCreditCrew.ID == nil {
			break
		}

		return e.complexity.PersonCreditCrew.ID(childComplexity), true

	case "PersonCreditCrew.job":
		if e.complexity.PersonCreditCrew.Job == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Job(childComplexity), true

	case "PersonCreditCrew.media_type":
		if e.complexity.PersonCreditCrew.MediaType == nil {
			break
		}

		return e.complexity.PersonCreditCrew.MediaType(childComplexity), true

	case "PersonCreditCrew.name":
		if e.complexity.PersonCreditCrew.Name == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Name(childComplexity), true

	case "PersonCreditCrew.origin_country":
		if e.complexity.PersonCreditCrew.OriginCountry == nil {
			break
		}

		return e.complexity.PersonCreditCrew.OriginCountry(childComplexity), true

	case "PersonCreditCrew.original_language":
		if e.complexity.PersonCreditCrew.OriginalLanguage == nil {
			break
		}

		return e.complexity.PersonCreditCrew.OriginalLanguage(childComplexity), true

	case "PersonCreditCrew.original_name":
		if e.complexity.PersonCreditCrew.OriginalName == nil {
			break
		}

		return e.complexity.PersonCreditCrew.OriginalName(childComplexity), true

	case "PersonCreditCrew.original_title":
		if e.complexity.PersonCreditCrew.OriginalTitle == nil {
			break
		}

		return e.complexity.PersonCreditCrew.OriginalTitle(childComplexity), true

	case "PersonCreditCrew.overview":
		if e.complexity.PersonCreditCrew.Overview == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Overview(childComplexity), true

	case "PersonCreditCrew.popularity":
		if e.complexity.PersonCreditCrew.Popularity == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Popularity(childComplexity), true

	case "PersonCreditCrew.poster_path":
		if e.complexity.PersonCreditCrew.PosterPath == nil {
			break
		}

		return e.complexity.PersonCreditCrew.PosterPath(childComplexity), true

	case "PersonCreditCrew.release_date":
		if e.complexity.PersonCreditCrew.ReleaseDate == nil {
			break
		}

		return e.complexity.PersonCreditCrew.ReleaseDate(childComplexity), true

	case "PersonCreditCrew.title":
		if e.complexity.PersonCreditCrew.Title == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Title(childComplexity), true

	case "PersonCreditCrew.video":
		if e.complexity.PersonCreditCrew.Video == nil {
			break
		}

		return e.complexity.PersonCreditCrew.Video(childComplexity), true

	case "PersonCreditCrew.vote_average":
		if e.complexity.PersonCreditCrew.VoteAverage == nil {
			break
		}

		return e.complexity.PersonCreditCrew.VoteAverage(childComplexity), true

	case "PersonCreditCrew.vote_count":
		if e.complexity.PersonCreditCrew.VoteCount == nil {
			break
		}

		return e.complexity.PersonCreditCrew.VoteCount(childComplexity), true

	case "PersonCredits.cast":
		if e.complexity.PersonCredits.Cast == nil {
			break
		}

		return e.complexity.PersonCredits.Cast(childComplexity), true

	case "PersonCredits.crew":
		if e.complexity.PersonCredits.Crew == nil {
			break
		}

		return e.complexity.PersonCredits.Crew(childComplexity), true

	case "PersonDetail.adult":
		if e.complexity.PersonDetail.Adult == nil {
			break
		}

		return e.complexity.PersonDetail.Adult(childComplexity), true

	case "PersonDetail.also_known_as":
		if e.complexity.PersonDetail.AlsoKnownAs == nil {
			break
		}

		return e.complexity.PersonDetail.AlsoKnownAs(childComplexity), true

	case "PersonDetail.biography":
		if e.complexity.PersonDetail.Biography == nil {
			break
		}

		return e.complexity.PersonDetail.Biography(childComplexity), true

	case "PersonDetail.birthday":
		if e.complexity.PersonDetail.Birthday == nil {
			break
		}

		return e.complexity.PersonDetail.Birthday(childComplexity), true

	case "PersonDetail.combined_credits":
		if e.complexity.PersonDetail.CombinedCredits == nil {
			break
		}

		return e.complexity.PersonDetail.CombinedCredits(childComplexity), true

	case "PersonDetail.deathday":
		if e.complexity.PersonDetail.Deathday == nil {
			break
		}

		return e.complexity.PersonDetail.Deathday(childComplexity), true

	case "PersonDetail.external_ids":
		if e.complexity.PersonDetail.ExternalIds == nil {
			break
		}

		return e.complexity.PersonDetail.ExternalIds(childComplexity), true

	case "PersonDetail.gender":
		if e.complexity.PersonDetail.Gender == nil {
			break
		}

		return e.complexity.PersonDetail.Gender(childComplexity), true

	case "PersonDetail.homepage":
		if e.complexity.PersonDetail.Homepage == nil {
			break
		}

		return e.complexity.PersonDetail.Homepage(childComplexity), true

	case "PersonDetail.id":
		if e.complexity.PersonDetail.ID == nil {
			break
		}

		return e.complexity.PersonDetail.ID(childComplexity), true

	case "PersonDetail.images":
		if e.complexity.PersonDetail.Images == nil {
			break
		}

		return e.complexity.PersonDetail.Images(childComplexity), true

	case "PersonDetail.imdb_id":
		if e.complexity.PersonDetail.ImdbID == nil {
			break
		}

		return e.complexity.PersonDetail.ImdbID(childComplexity), true

	case "PersonDetail.known_for_department":
		if e.complexity.PersonDetail.KnownForDepartment == nil {
			break
		}

		return e.complexity.PersonDetail.KnownForDepartment(childComplexity), true

	case "PersonDetail.name":
		if e.complexity.PersonDetail.Name == nil {
			break
		}

		return e.complexity.PersonDetail.Name(childComplexity), true

	case "PersonDetail.place_of_birth":
		if e.complexity.PersonDetail.PlaceOfBirth == nil {
			break
		}

		return e.complexity.PersonDetail.PlaceOfBirth(childComplexity), true

	case "PersonDetail.popularity":
		if e.complexity.PersonDetail.Popularity == nil {
			break
		}

		return e.complexity.PersonDetail.Popularity(childComplexity), true

	case "PersonDetail.profile_path":
		if e.complexity.PersonDetail.ProfilePath == nil {
			break
		}

		return e.complexity.PersonDetail.ProfilePath(childComplexity), true

	case "PersonExternalIds.facebook_id":
		if e.complexity.PersonExternalIds.FacebookID == nil {
			break
		}

		return e.complexity.PersonExternalIds.FacebookID(childComplexity), true

	case "PersonExternalIds.freebase_id":
		if e.complexity.PersonExternalIds.FreebaseID == nil {
			break
		}

		return e.complexity.PersonExternalIds.FreebaseID(childComplexity), true

	case "PersonExternalIds.freebase_mid":
		if e.complexity.PersonExternalIds.FreebaseMid == nil {
			break
		}

		return e.complexity.PersonExternalIds.FreebaseMid(childComplexity), true

	case "PersonExternalIds.imdb_id":
		if e.complexity.PersonExternalIds.ImdbID == nil {
			break
		}

		return e.complexity.PersonExternalIds.ImdbID(childComplexity), true

	case "PersonExternalIds.instagram_id":
		if e.complexity.PersonExternalIds.InstagramID == nil {
			break
		}

		return e.complexity.PersonExternalIds.InstagramID(childComplexity), true

	case "PersonExternalIds.tvrage_id":
		if e.complexity.PersonExternalIds.TvrageID == nil {
			break
		}

		return e.complexity.PersonExternalIds.TvrageID(childComplexity), true

	case "PersonExternalIds.twitter_id":
		if e.complexity.PersonExternalIds.TwitterID == nil {
			break
		}

		return e.complexity.PersonExternalIds.TwitterID(childComplexity), true

	case "PersonImages.profiles":
		if e.complexity.PersonImages.Profiles == nil {
			break
		}

		return e.complexity.PersonImages.Profiles(childComplexity), true

	case "PopularPeople.page":
		if e.complexity.PopularPeople.Page == nil {
			break
		}

		return e.complexity.PopularPeople.Page(childComplexity), true

	case "PopularPeople.results":
		if e.complexity.PopularPeople.Results == nil {
			break
		}

		return e.complexity.PopularPeople.Results(childComplexity), true

	case "PopularPeople.total_pages":
		if e.complexity.PopularPeople.TotalPages == nil {
			break
		}

		return e.complexity.PopularPeople.TotalPages(childComplexity), true

	case "PopularPeople.total_results":
		if e.complexity.PopularPeople.TotalResults == nil {
			break
		}

		return e.complexity.PopularPeople.TotalResults(childComplexity), true

	case "PopularPerson.adult":
		if e.complexity.PopularPerson.Adult == nil {
			break
		}

		return e.complexity.PopularPerson.Adult(childComplexity), true

	case "PopularPerson.id":
		if e.complexity.PopularPerson.ID == nil {
			break
		}

		return e.complexity.PopularPerson.ID(childComplexity), true

	case "PopularPerson.known_for":
		if e.complexity.PopularPerson.KnownFor == nil {
			break
		}

		return e.complexity.PopularPerson.KnownFor(childComplexity), true

	case "PopularPerson.name":
		if e.complexity.PopularPerson.Name == nil {
			break
		}

		return e.complexity.PopularPerson.Name(childComplexity), true

	case "PopularPerson.popularity":
		if e.complexity.PopularPerson.Popularity == nil {
			break
		}

		return e.complexity.PopularPerson.Popularity(childComplexity), true

	case "PopularPerson.profile_path":
		if e.complexity.PopularPerson.ProfilePath == nil {
			break
		}

		return e.complexity.PopularPerson.ProfilePath(childComplexity), true

	case "ProductionCompany.id":
		if e.complexity.ProductionCompany.ID == nil {
			break
		}

		return e.complexity.ProductionCompany.ID(childComplexity), true

	case "ProductionCompany.logo_path":
		if e.complexity.ProductionCompany.LogoPath == nil {
			break
		}

		return e.complexity.ProductionCompany.LogoPath(childComplexity), true

	case "ProductionCompany.name":
		if e.complexity.ProductionCompany.Name == nil {
			break
		}

		return e.complexity.ProductionCompany.Name(childComplexity), true

	case "ProductionCompany.origin_country":
		if e.complexity.ProductionCompany.OriginCountry == nil {
			break
		}

		return e.complexity.ProductionCompany.OriginCountry(childComplexity), true

	case "ProductionCountry.iso_3166_1":
		if e.complexity.ProductionCountry.Iso3166_1 == nil {
			break
		}

		return e.complexity.ProductionCountry.Iso3166_1(childComplexity), true

	case "ProductionCountry.name":
		if e.complexity.ProductionCountry.Name == nil {
			break
		}

		return e.complexity.ProductionCountry.Name(childComplexity), true

	case "Query.introduction":
		if e.complexity.Query.Introduction == nil {
			break
		}

		return e.complexity.Query.Introduction(childComplexity), true

	case "Query.movie":
		if e.complexity.Query.Movie == nil {
			break
		}

		return e.complexity.Query.Movie(childComplexity), true

	case "Query.people":
		if e.complexity.Query.People == nil {
			break
		}

		return e.complexity.Query.People(childComplexity), true

	case "Query.trending":
		if e.complexity.Query.Trending == nil {
			break
		}

		args, err := ec.field_Query_trending_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Trending(childComplexity, args["media_type"].(string), args["time_window"].(string), args["page"].(*int)), true

	case "Query.tv":
		if e.complexity.Query.Tv == nil {
			break
		}

		return e.complexity.Query.Tv(childComplexity), true

	case "Season.air_date":
		if e.complexity.Season.AirDate == nil {
			break
		}

		return e.complexity.Season.AirDate(childComplexity), true

	case "Season.episode_count":
		if e.complexity.Season.EpisodeCount == nil {
			break
		}

		return e.complexity.Season.EpisodeCount(childComplexity), true

	case "Season.id":
		if e.complexity.Season.ID == nil {
			break
		}

		return e.complexity.Season.ID(childComplexity), true

	case "Season.name":
		if e.complexity.Season.Name == nil {
			break
		}

		return e.complexity.Season.Name(childComplexity), true

	case "Season.overview":
		if e.complexity.Season.Overview == nil {
			break
		}

		return e.complexity.Season.Overview(childComplexity), true

	case "Season.poster_path":
		if e.complexity.Season.PosterPath == nil {
			break
		}

		return e.complexity.Season.PosterPath(childComplexity), true

	case "Season.season_number":
		if e.complexity.Season.SeasonNumber == nil {
			break
		}

		return e.complexity.Season.SeasonNumber(childComplexity), true

	case "SpokenLanguage.english_name":
		if e.complexity.SpokenLanguage.EnglishName == nil {
			break
		}

		return e.complexity.SpokenLanguage.EnglishName(childComplexity), true

	case "SpokenLanguage.iso_639_1":
		if e.complexity.SpokenLanguage.Iso639_1 == nil {
			break
		}

		return e.complexity.SpokenLanguage.Iso639_1(childComplexity), true

	case "SpokenLanguage.name":
		if e.complexity.SpokenLanguage.Name == nil {
			break
		}

		return e.complexity.SpokenLanguage.Name(childComplexity), true

	case "TV.detail":
		if e.complexity.TV.Detail == nil {
			break
		}

		args, err := ec.field_TV_detail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TV.Detail(childComplexity, args["id"].(int), args["language"].(*string)), true

	case "TV.on_the_air":
		if e.complexity.TV.OnTheAir == nil {
			break
		}

		args, err := ec.field_TV_on_the_air_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TV.OnTheAir(childComplexity, args["page"].(*int), args["language"].(*string)), true

	case "TV.popular":
		if e.complexity.TV.Popular == nil {
			break
		}

		args, err := ec.field_TV_popular_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TV.Popular(childComplexity, args["page"].(*int), args["language"].(*string)), true

	case "TV.top_rated":
		if e.complexity.TV.TopRated == nil {
			break
		}

		args, err := ec.field_TV_top_rated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TV.TopRated(childComplexity, args["page"].(*int), args["language"].(*string)), true

	case "TVDetail.backdrop_path":
		if e.complexity.TVDetail.BackdropPath == nil {
			break
		}

		return e.complexity.TVDetail.BackdropPath(childComplexity), true

	case "TVDetail.created_by":
		if e.complexity.TVDetail.CreatedBy == nil {
			break
		}

		return e.complexity.TVDetail.CreatedBy(childComplexity), true

	case "TVDetail.credits":
		if e.complexity.TVDetail.Credits == nil {
			break
		}

		return e.complexity.TVDetail.Credits(childComplexity), true

	case "TVDetail.episode_runtime":
		if e.complexity.TVDetail.EpisodeRuntime == nil {
			break
		}

		return e.complexity.TVDetail.EpisodeRuntime(childComplexity), true

	case "TVDetail.external_ids":
		if e.complexity.TVDetail.ExternalIds == nil {
			break
		}

		return e.complexity.TVDetail.ExternalIds(childComplexity), true

	case "TVDetail.first_air_date":
		if e.complexity.TVDetail.FirstAirDate == nil {
			break
		}

		return e.complexity.TVDetail.FirstAirDate(childComplexity), true

	case "TVDetail.genres":
		if e.complexity.TVDetail.Genres == nil {
			break
		}

		return e.complexity.TVDetail.Genres(childComplexity), true

	case "TVDetail.homepage":
		if e.complexity.TVDetail.Homepage == nil {
			break
		}

		return e.complexity.TVDetail.Homepage(childComplexity), true

	case "TVDetail.id":
		if e.complexity.TVDetail.ID == nil {
			break
		}

		return e.complexity.TVDetail.ID(childComplexity), true

	case "TVDetail.images":
		if e.complexity.TVDetail.Images == nil {
			break
		}

		return e.complexity.TVDetail.Images(childComplexity), true

	case "TVDetail.imdb_rating":
		if e.complexity.TVDetail.ImdbRating == nil {
			break
		}

		return e.complexity.TVDetail.ImdbRating(childComplexity), true

	case "TVDetail.in_production":
		if e.complexity.TVDetail.InProduction == nil {
			break
		}

		return e.complexity.TVDetail.InProduction(childComplexity), true

	case "TVDetail.languages":
		if e.complexity.TVDetail.Languages == nil {
			break
		}

		return e.complexity.TVDetail.Languages(childComplexity), true

	case "TVDetail.last_air_date":
		if e.complexity.TVDetail.LastAirDate == nil {
			break
		}

		return e.complexity.TVDetail.LastAirDate(childComplexity), true

	case "TVDetail.last_episode_to_air":
		if e.complexity.TVDetail.LastEpisodeToAir == nil {
			break
		}

		return e.complexity.TVDetail.LastEpisodeToAir(childComplexity), true

	case "TVDetail.name":
		if e.complexity.TVDetail.Name == nil {
			break
		}

		return e.complexity.TVDetail.Name(childComplexity), true

	case "TVDetail.networks":
		if e.complexity.TVDetail.Networks == nil {
			break
		}

		return e.complexity.TVDetail.Networks(childComplexity), true

	case "TVDetail.number_of_episodes":
		if e.complexity.TVDetail.NumberOfEpisodes == nil {
			break
		}

		return e.complexity.TVDetail.NumberOfEpisodes(childComplexity), true

	case "TVDetail.number_of_seasons":
		if e.complexity.TVDetail.NumberOfSeasons == nil {
			break
		}

		return e.complexity.TVDetail.NumberOfSeasons(childComplexity), true

	case "TVDetail.origin_country":
		if e.complexity.TVDetail.OriginCountry == nil {
			break
		}

		return e.complexity.TVDetail.OriginCountry(childComplexity), true

	case "TVDetail.original_language":
		if e.complexity.TVDetail.OriginalLanguage == nil {
			break
		}

		return e.complexity.TVDetail.OriginalLanguage(childComplexity), true

	case "TVDetail.original_name":
		if e.complexity.TVDetail.OriginalName == nil {
			break
		}

		return e.complexity.TVDetail.OriginalName(childComplexity), true

	case "TVDetail.overview":
		if e.complexity.TVDetail.Overview == nil {
			break
		}

		return e.complexity.TVDetail.Overview(childComplexity), true

	case "TVDetail.popularity":
		if e.complexity.TVDetail.Popularity == nil {
			break
		}

		return e.complexity.TVDetail.Popularity(childComplexity), true

	case "TVDetail.poster_path":
		if e.complexity.TVDetail.PosterPath == nil {
			break
		}

		return e.complexity.TVDetail.PosterPath(childComplexity), true

	case "TVDetail.production_companies":
		if e.complexity.TVDetail.ProductionCompanies == nil {
			break
		}

		return e.complexity.TVDetail.ProductionCompanies(childComplexity), true

	case "TVDetail.production_countries":
		if e.complexity.TVDetail.ProductionCountries == nil {
			break
		}

		return e.complexity.TVDetail.ProductionCountries(childComplexity), true

	case "TVDetail.recommendations":
		if e.complexity.TVDetail.Recommendations == nil {
			break
		}

		args, err := ec.field_TVDetail_recommendations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TVDetail.Recommendations(childComplexity, args["page"].(*int)), true

	case "TVDetail.seasons":
		if e.complexity.TVDetail.Seasons == nil {
			break
		}

		return e.complexity.TVDetail.Seasons(childComplexity), true

	case "TVDetail.similar":
		if e.complexity.TVDetail.Similar == nil {
			break
		}

		args, err := ec.field_TVDetail_similar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.TVDetail.Similar(childComplexity, args["page"].(*int)), true

	case "TVDetail.spoken_languages":
		if e.complexity.TVDetail.SpokenLanguages == nil {
			break
		}

		return e.complexity.TVDetail.SpokenLanguages(childComplexity), true

	case "TVDetail.status":
		if e.complexity.TVDetail.Status == nil {
			break
		}

		return e.complexity.TVDetail.Status(childComplexity), true

	case "TVDetail.tagline":
		if e.complexity.TVDetail.Tagline == nil {
			break
		}

		return e.complexity.TVDetail.Tagline(childComplexity), true

	case "TVDetail.type":
		if e.complexity.TVDetail.Type == nil {
			break
		}

		return e.complexity.TVDetail.Type(childComplexity), true

	case "TVDetail.videos":
		if e.complexity.TVDetail.Videos == nil {
			break
		}

		return e.complexity.TVDetail.Videos(childComplexity), true

	case "TVDetail.vote_average":
		if e.complexity.TVDetail.VoteAverage == nil {
			break
		}

		return e.complexity.TVDetail.VoteAverage(childComplexity), true

	case "TVDetail.vote_count":
		if e.complexity.TVDetail.VoteCount == nil {
			break
		}

		return e.complexity.TVDetail.VoteCount(childComplexity), true

	case "TVExternalIds.facebook_id":
		if e.complexity.TVExternalIds.FacebookID == nil {
			break
		}

		return e.complexity.TVExternalIds.FacebookID(childComplexity), true

	case "TVExternalIds.freebase_id":
		if e.complexity.TVExternalIds.FreebaseID == nil {
			break
		}

		return e.complexity.TVExternalIds.FreebaseID(childComplexity), true

	case "TVExternalIds.freebase_mid":
		if e.complexity.TVExternalIds.FreebaseMid == nil {
			break
		}

		return e.complexity.TVExternalIds.FreebaseMid(childComplexity), true

	case "TVExternalIds.imdb_id":
		if e.complexity.TVExternalIds.ImdbID == nil {
			break
		}

		return e.complexity.TVExternalIds.ImdbID(childComplexity), true

	case "TVExternalIds.instagram_id":
		if e.complexity.TVExternalIds.InstagramID == nil {
			break
		}

		return e.complexity.TVExternalIds.InstagramID(childComplexity), true

	case "TVExternalIds.tvdb_id":
		if e.complexity.TVExternalIds.TvdbID == nil {
			break
		}

		return e.complexity.TVExternalIds.TvdbID(childComplexity), true

	case "TVExternalIds.tvrage_id":
		if e.complexity.TVExternalIds.TvrageID == nil {
			break
		}

		return e.complexity.TVExternalIds.TvrageID(childComplexity), true

	case "TVExternalIds.twitter_id":
		if e.complexity.TVExternalIds.TwitterID == nil {
			break
		}

		return e.complexity.TVExternalIds.TwitterID(childComplexity), true

	case "TVList.page":
		if e.complexity.TVList.Page == nil {
			break
		}

		return e.complexity.TVList.Page(childComplexity), true

	case "TVList.results":
		if e.complexity.TVList.Results == nil {
			break
		}

		return e.complexity.TVList.Results(childComplexity), true

	case "TVList.total_pages":
		if e.complexity.TVList.TotalPages == nil {
			break
		}

		return e.complexity.TVList.TotalPages(childComplexity), true

	case "TVList.total_results":
		if e.complexity.TVList.TotalResults == nil {
			break
		}

		return e.complexity.TVList.TotalResults(childComplexity), true

	case "TVListItem.backdrop_path":
		if e.complexity.TVListItem.BackdropPath == nil {
			break
		}

		return e.complexity.TVListItem.BackdropPath(childComplexity), true

	case "TVListItem.first_air_date":
		if e.complexity.TVListItem.FirstAirDate == nil {
			break
		}

		return e.complexity.TVListItem.FirstAirDate(childComplexity), true

	case "TVListItem.genre_ids":
		if e.complexity.TVListItem.GenreIds == nil {
			break
		}

		return e.complexity.TVListItem.GenreIds(childComplexity), true

	case "TVListItem.id":
		if e.complexity.TVListItem.ID == nil {
			break
		}

		return e.complexity.TVListItem.ID(childComplexity), true

	case "TVListItem.name":
		if e.complexity.TVListItem.Name == nil {
			break
		}

		return e.complexity.TVListItem.Name(childComplexity), true

	case "TVListItem.origin_country":
		if e.complexity.TVListItem.OriginCountry == nil {
			break
		}

		return e.complexity.TVListItem.OriginCountry(childComplexity), true

	case "TVListItem.original_language":
		if e.complexity.TVListItem.OriginalLanguage == nil {
			break
		}

		return e.complexity.TVListItem.OriginalLanguage(childComplexity), true

	case "TVListItem.original_name":
		if e.complexity.TVListItem.OriginalName == nil {
			break
		}

		return e.complexity.TVListItem.OriginalName(childComplexity), true

	case "TVListItem.overview":
		if e.complexity.TVListItem.Overview == nil {
			break
		}

		return e.complexity.TVListItem.Overview(childComplexity), true

	case "TVListItem.popularity":
		if e.complexity.TVListItem.Popularity == nil {
			break
		}

		return e.complexity.TVListItem.Popularity(childComplexity), true

	case "TVListItem.poster_path":
		if e.complexity.TVListItem.PosterPath == nil {
			break
		}

		return e.complexity.TVListItem.PosterPath(childComplexity), true

	case "TVListItem.vote_average":
		if e.complexity.TVListItem.VoteAverage == nil {
			break
		}

		return e.complexity.TVListItem.VoteAverage(childComplexity), true

	case "TVListItem.vote_count":
		if e.complexity.TVListItem.VoteCount == nil {
			break
		}

		return e.complexity.TVListItem.VoteCount(childComplexity), true

	case "Trending.page":
		if e.complexity.Trending.Page == nil {
			break
		}

		return e.complexity.Trending.Page(childComplexity), true

	case "Trending.results":
		if e.complexity.Trending.Results == nil {
			break
		}

		return e.complexity.Trending.Results(childComplexity), true

	case "Trending.total_pages":
		if e.complexity.Trending.TotalPages == nil {
			break
		}

		return e.complexity.Trending.TotalPages(childComplexity), true

	case "Trending.total_results":
		if e.complexity.Trending.TotalResults == nil {
			break
		}

		return e.complexity.Trending.TotalResults(childComplexity), true

	case "TrendingItem.adult":
		if e.complexity.TrendingItem.Adult == nil {
			break
		}

		return e.complexity.TrendingItem.Adult(childComplexity), true

	case "TrendingItem.backdrop_path":
		if e.complexity.TrendingItem.BackdropPath == nil {
			break
		}

		return e.complexity.TrendingItem.BackdropPath(childComplexity), true

	case "TrendingItem.first_air_date":
		if e.complexity.TrendingItem.FirstAirDate == nil {
			break
		}

		return e.complexity.TrendingItem.FirstAirDate(childComplexity), true

	case "TrendingItem.genre_ids":
		if e.complexity.TrendingItem.GenreIds == nil {
			break
		}

		return e.complexity.TrendingItem.GenreIds(childComplexity), true

	case "TrendingItem.id":
		if e.complexity.TrendingItem.ID == nil {
			break
		}

		return e.complexity.TrendingItem.ID(childComplexity), true

	case "TrendingItem.name":
		if e.complexity.TrendingItem.Name == nil {
			break
		}

		return e.complexity.TrendingItem.Name(childComplexity), true

	case "TrendingItem.origin_country":
		if e.complexity.TrendingItem.OriginCountry == nil {
			break
		}

		return e.complexity.TrendingItem.OriginCountry(childComplexity), true

	case "TrendingItem.original_language":
		if e.complexity.TrendingItem.OriginalLanguage == nil {
			break
		}

		return e.complexity.TrendingItem.OriginalLanguage(childComplexity), true

	case "TrendingItem.original_name":
		if e.complexity.TrendingItem.OriginalName == nil {
			break
		}

		return e.complexity.TrendingItem.OriginalName(childComplexity), true

	case "TrendingItem.original_title":
		if e.complexity.TrendingItem.OriginalTitle == nil {
			break
		}

		return e.complexity.TrendingItem.OriginalTitle(childComplexity), true

	case "TrendingItem.overview":
		if e.complexity.TrendingItem.Overview == nil {
			break
		}

		return e.complexity.TrendingItem.Overview(childComplexity), true

	case "TrendingItem.popularity":
		if e.complexity.TrendingItem.Popularity == nil {
			break
		}

		return e.complexity.TrendingItem.Popularity(childComplexity), true

	case "TrendingItem.poster_path":
		if e.complexity.TrendingItem.PosterPath == nil {
			break
		}

		return e.complexity.TrendingItem.PosterPath(childComplexity), true

	case "TrendingItem.release_date":
		if e.complexity.TrendingItem.ReleaseDate == nil {
			break
		}

		return e.complexity.TrendingItem.ReleaseDate(childComplexity), true

	case "TrendingItem.title":
		if e.complexity.TrendingItem.Title == nil {
			break
		}

		return e.complexity.TrendingItem.Title(childComplexity), true

	case "TrendingItem.video":
		if e.complexity.TrendingItem.Video == nil {
			break
		}

		return e.complexity.TrendingItem.Video(childComplexity), true

	case "TrendingItem.vote_average":
		if e.complexity.TrendingItem.VoteAverage == nil {
			break
		}

		return e.complexity.TrendingItem.VoteAverage(childComplexity), true

	case "TrendingItem.vote_count":
		if e.complexity.TrendingItem.VoteCount == nil {
			break
		}

		return e.complexity.TrendingItem.VoteCount(childComplexity), true

	case "VideoItem.id":
		if e.complexity.VideoItem.ID == nil {
			break
		}

		return e.complexity.VideoItem.ID(childComplexity), true

	case "VideoItem.iso_3166_1":
		if e.complexity.VideoItem.Iso3166_1 == nil {
			break
		}

		return e.complexity.VideoItem.Iso3166_1(childComplexity), true

	case "VideoItem.iso_639_1":
		if e.complexity.VideoItem.Iso639_1 == nil {
			break
		}

		return e.complexity.VideoItem.Iso639_1(childComplexity), true

	case "VideoItem.key":
		if e.complexity.VideoItem.Key == nil {
			break
		}

		return e.complexity.VideoItem.Key(childComplexity), true

	case "VideoItem.name":
		if e.complexity.VideoItem.Name == nil {
			break
		}

		return e.complexity.VideoItem.Name(childComplexity), true

	case "VideoItem.official":
		if e.complexity.VideoItem.Official == nil {
			break
		}

		return e.complexity.VideoItem.Official(childComplexity), true

	case "VideoItem.published_at":
		if e.complexity.VideoItem.PublishedAt == nil {
			break
		}

		return e.complexity.VideoItem.PublishedAt(childComplexity), true

	case "VideoItem.site":
		if e.complexity.VideoItem.Site == nil {
			break
		}

		return e.complexity.VideoItem.Site(childComplexity), true

	case "VideoItem.size":
		if e.complexity.VideoItem.Size == nil {
			break
		}

		return e.complexity.VideoItem.Size(childComplexity), true

	case "VideoItem.type":
		if e.complexity.VideoItem.Type == nil {
			break
		}

		return e.complexity.VideoItem.Type(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/main.graphql", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Introduction {
  Name: String!
  Message: String!
}

type ProductionCompany {
  name: String
  id: Int!
  logo_path: String
  origin_country: String
}

type ProductionCountry {
  iso_3166_1: String
  name: String
}

type SpokenLanguage {
  iso_639_1: String
  name: String
  english_name: String
}

type Genre {
  id: Int
  name: String
}

type ImageItem {
  aspect_ratio: Float
  file_path: String
  height: Int
  iso_639_1: String
  vote_average: Float
  vote_count: Int
  width: Int
}

type MediaImages {
  backdrops: [ImageItem!]
  posters: [ImageItem!]
}

type VideoItem {
  iso_639_1: String
  iso_3166_1: String
  name: String
  key: String
  site: String
  size: Int
  type: String
  official: Boolean
  published_at: String
  id: String
}

type MediaVideos {
  results: [VideoItem!]
}

type CreditCastItem {
  adult: Boolean
  gender: Int
  id: Int!
  known_for_department: String
  name: String
  original_name: String
  popularity: Float
  profile_path: String
  cast_id: Int
  character: String
  credit_id: String
  order: Int
}

type CreditCrewItem {
  adult: Boolean
  gender: Int
  id: Int!
  known_for_department: String
  name: String
  original_name: String
  popularity: Float
  profile_path: String
  credit_id: String
  department: String
  job: String
}

type MediaCredit {
  cast: [CreditCastItem!]
  crew: [CreditCrewItem!]
}

type IMDBRating {
  count: Int
  star: Float
}

type Query {
  introduction: Introduction!
}
`, BuiltIn: false},
	{Name: "../schema/movie.graphql", Input: `type MovieListItem {
  poster_path: String
  adult: Boolean
  overview: String
  release_date: String
  genre_ids: [Int]
  id: Int!
  original_title: String
  original_language: String
  title: String
  backdrop_path: String
  popularity: Float
  vote_count: Int
  video: Boolean
  vote_average: Float
}

type MovieList {
  page: Int!
  results: [MovieListItem!]!
  total_results: Int!
  total_pages: Int!
}

type MovieExternalIds {
  imdb_id: String
  facebook_id: String
  twitter_id: String
  instagram_id: String
  wikidata_id: String
}

type MovieDetail {
  adult: Boolean
  backdrop_path: String
  budget: Int
  genres: [Genre!]
  homepage: String
  id: Int!
  imdb_id: String
  original_language: String
  original_title: String
  overview: String
  popularity: Float
  poster_path: String
  production_companies: [ProductionCompany!]
  production_countries: [ProductionCountry!]
  release_date: String
  revenue: Int
  runtime: Int
  spoken_languages: [SpokenLanguage!]
  status: String
  tagline: String
  title: String
  video: Boolean
  vote_average: Float
  vote_count: Int
  credits: MediaCredit!
  videos: MediaVideos!
  images: MediaImages!
  recommendations(page: Int): MovieList!
  similar(page: Int): MovieList!
  imdb_rating: IMDBRating
  external_ids: MovieExternalIds
}

type Movie {
  detail(id: Int!, language: String): MovieDetail!
  popular(page: Int, language: String, region: String): MovieList!
  top_rated(page: Int, language: String, region: String): MovieList!
  upcoming(page: Int, language: String, region: String): MovieList!
}

extend type Query {
  movie: Movie!
}
`, BuiltIn: false},
	{Name: "../schema/people.graphql", Input: `type KnownForItem {
  poster_path: String
  adult: Boolean
  overview: String
  release_date: String
  original_title: String
  genre_ids: [Int!]
  id: Int!
  media_type: String!
  original_language: String
  title: String
  backdrop_path: String
  popularity: Float
  vote_count: Int
  video: Boolean
  vote_average: Float
  first_air_date: String
  origin_country: [String!]
  name: String
  original_name: String
}

type PopularPerson {
  profile_path: String
  adult: Boolean
  id: Int!
  known_for: [KnownForItem!]
  name: String
  popularity: Float
}

type PopularPeople {
  page: Int!
  results: [PopularPerson!]!
  total_results: Int!
  total_pages: Int!
}

type PersonExternalIds {
  imdb_id: String
  facebook_id: String
  freebase_mid: String
  freebase_id: String
  tvrage_id: String
  twitter_id: String
  instagram_id: String
}

type PersonImages {
  profiles: [ImageItem!]
}

type PersonCreditCast {
  id: Int!
  original_language: String
  episode_count: Int
  overview: String
  origin_country: [String!]
  original_name: String
  genre_ids: [Int!]
  name: String
  media_type: String
  poster_path: String
  first_air_date: String
  vote_average: Float
  vote_count: Int
  character: String
  backdrop_path: String
  popularity: Float
  credit_id: String
  original_title: String
  video: Boolean
  release_date: String
  title: String
  adult: Boolean
}

type PersonCreditCrew {
  id: Int!
  department: String
  original_language: String
  episode_count: Int
  job: String
  overview: String
  origin_country: [String!]
  original_name: String
  vote_count: Int
  name: String
  media_type: String
  popularity: Float
  credit_id: String
  backdrop_path: String
  first_air_date: String
  vote_average: Float
  genre_ids: [Int!]
  poster_path: String
  original_title: String
  video: Boolean
  title: String
  adult: Boolean
  release_date: String
}

type PersonCredits {
  cast: [PersonCreditCast!]
  crew: [PersonCreditCrew!]
}

type PersonDetail {
  birthday: String
  known_for_department: String
  deathday: String
  id: Int!
  name: String
  also_known_as: [String!]
  gender: Int
  biography: String
  popularity: Float
  place_of_birth: String
  profile_path: String
  adult: Boolean
  imdb_id: String
  homepage: String
  external_ids: PersonExternalIds
  images: PersonImages
  combined_credits: PersonCredits
}

type People {
  detail(id: Int!, language: String): PersonDetail!
  popular(language: String, page: Int): PopularPeople!
}

extend type Query {
  people: People!
}
`, BuiltIn: false},
	{Name: "../schema/trending.graphql", Input: `type TrendingItem {
  poster_path: String
  adult: Boolean
  overview: String
  release_date: String
  genre_ids: [Int!]
  id: Int!
  original_title: String
  original_language: String
  title: String
  backdrop_path: String
  popularity: Float
  vote_count: Int
  video: Boolean
  vote_average: Float
  first_air_date: String
  origin_country: [String!]
  name: String
  original_name: String
}

type Trending {
  page: Int!
  results: [TrendingItem!]!
  total_pages: Int!
  total_results: Int!
}

extend type Query {
  trending(media_type: String!, time_window: String!, page: Int): Trending!
}
`, BuiltIn: false},
	{Name: "../schema/tv.graphql", Input: `type TVListItem {
  poster_path: String
  popularity: Float
  id: Int!
  backdrop_path: String
  vote_average: Float
  overview: String
  first_air_date: String
  origin_country: [String!]
  genre_ids: [Int!]
  original_language: String
  vote_count: Int
  name: String
  original_name: String
}

type TVList {
  page: Int!
  results: [TVListItem!]!
  total_results: Int!
  total_pages: Int!
}

type CreatedBy {
  id: Int
  credit_id: String
  name: String
  gender: Int
  profile_path: String
}

type Episode {
  air_date: String
  episode_number: Int
  id: Int!
  name: String
  overview: String
  production_code: String
  season_number: Int
  still_path: String
  vote_average: Float
  vote_count: Int
}

type Network {
  name: String
  id: Int!
  logo_path: String
  origin_country: String
}

type Season {
  air_date: String
  episode_count: Int
  id: Int!
  name: String
  overview: String
  poster_path: String
  season_number: Int
}

type TVExternalIds {
  imdb_id: String
  freebase_mid: String
  freebase_id: String
  tvdb_id: Int
  tvrage_id: Int
  facebook_id: String
  instagram_id: String
  twitter_id: String
}

type TVDetail {
  backdrop_path: String
  created_by: [CreatedBy!]
  episode_runtime: [Int!]
  first_air_date: String
  genres: [Genre!]
  homepage: String
  id: Int!
  in_production: Boolean
  languages: [String!]
  last_air_date: String
  last_episode_to_air: Episode
  name: String
  networks: [Network!]
  number_of_episodes: Int
  number_of_seasons: Int
  origin_country: [String!]
  original_language: String
  original_name: String
  overview: String
  popularity: Float
  poster_path: String
  production_companies: [ProductionCompany!]
  production_countries: [ProductionCountry!]
  seasons: [Season!]
  spoken_languages: [SpokenLanguage!]
  status: String
  tagline: String
  type: String
  vote_average: Float
  vote_count: Int
  credits: MediaCredit!
  videos: MediaVideos!
  images: MediaImages!
  recommendations(page: Int): TVList!
  similar(page: Int): TVList!
  imdb_rating: IMDBRating
  external_ids: TVExternalIds
}

type TV {
  detail(id: Int!, language: String): TVDetail!
  popular(page: Int, language: String): TVList!
  top_rated(page: Int, language: String): TVList!
  on_the_air(page: Int, language: String): TVList!
}

extend type Query {
  tv: TV!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_MovieDetail_recommendations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_MovieDetail_similar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_Movie_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_Movie_popular_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg2
	return args, nil
}

func (ec *executionContext) field_Movie_top_rated_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg2
	return args, nil
}

func (ec *executionContext) field_Movie_upcoming_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg2
	return args, nil
}

func (ec *executionContext) field_People_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_People_popular_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_trending_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["media_type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("media_type"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["media_type"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["time_window"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time_window"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["time_window"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg2
	return args, nil
}

func (ec *executionContext) field_TVDetail_recommendations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_TVDetail_similar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	return args, nil
}

func (ec *executionContext) field_TV_detail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_TV_on_the_air_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_TV_popular_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field_TV_top_rated_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["page"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["page"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["language"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["language"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CreatedBy_id(ctx context.Context, field graphql.CollectedField, obj *model.CreatedBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatedBy_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatedBy_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatedBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatedBy_credit_id(ctx context.Context, field graphql.CollectedField, obj *model.CreatedBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatedBy_credit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatedBy_credit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatedBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatedBy_name(ctx context.Context, field graphql.CollectedField, obj *model.CreatedBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatedBy_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatedBy_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatedBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatedBy_gender(ctx context.Context, field graphql.CollectedField, obj *model.CreatedBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatedBy_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatedBy_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatedBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreatedBy_profile_path(ctx context.Context, field graphql.CollectedField, obj *model.CreatedBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreatedBy_profile_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreatedBy_profile_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreatedBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_adult(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_gender(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_id(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_known_for_department(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_known_for_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KnownForDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_known_for_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_name(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_original_name(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_popularity(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_profile_path(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_profile_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_profile_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_cast_id(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_cast_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CastID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_cast_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_character(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_character(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Character, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_character(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_credit_id(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_credit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_credit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCastItem_order(ctx context.Context, field graphql.CollectedField, obj *model.CreditCastItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCastItem_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCastItem_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCastItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_adult(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_gender(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_id(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_known_for_department(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_known_for_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KnownForDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_known_for_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_name(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_original_name(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_popularity(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_profile_path(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_profile_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_profile_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_credit_id(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_credit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_credit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_department(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreditCrewItem_job(ctx context.Context, field graphql.CollectedField, obj *model.CreditCrewItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreditCrewItem_job(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreditCrewItem_job(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreditCrewItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_air_date(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_episode_number(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_episode_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_episode_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_id(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_name(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_overview(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_production_code(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_production_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_production_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_season_number(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_season_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeasonNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_season_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_still_path(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_still_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StillPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_still_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Episode_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.Episode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Episode_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Episode_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Episode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Genre_id(ctx context.Context, field graphql.CollectedField, obj *model.Genre) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Genre_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Genre_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Genre",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Genre_name(ctx context.Context, field graphql.CollectedField, obj *model.Genre) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Genre_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Genre_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Genre",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IMDBRating_count(ctx context.Context, field graphql.CollectedField, obj *model.IMDBRating) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IMDBRating_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IMDBRating_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IMDBRating",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IMDBRating_star(ctx context.Context, field graphql.CollectedField, obj *model.IMDBRating) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IMDBRating_star(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Star, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IMDBRating_star(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IMDBRating",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageItem_aspect_ratio(ctx context.Context, field graphql.CollectedField, obj *model.ImageItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageItem_aspect_ratio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AspectRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageItem_aspect_ratio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageItem_file_path(ctx context.Context, field graphql.CollectedField, obj *model.ImageItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageItem_file_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageItem_file_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageItem_height(ctx context.Context, field graphql.CollectedField, obj *model.ImageItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageItem_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageItem_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageItem_iso_639_1(ctx context.Context, field graphql.CollectedField, obj *model.ImageItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageItem_iso_639_1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso639_1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageItem_iso_639_1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageItem_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.ImageItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageItem_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageItem_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageItem_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.ImageItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageItem_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageItem_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ImageItem_width(ctx context.Context, field graphql.CollectedField, obj *model.ImageItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ImageItem_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ImageItem_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ImageItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Introduction_Name(ctx context.Context, field graphql.CollectedField, obj *model.Introduction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Introduction_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Introduction_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Introduction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Introduction_Message(ctx context.Context, field graphql.CollectedField, obj *model.Introduction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Introduction_Message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Introduction_Message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Introduction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_adult(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_overview(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_release_date(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_release_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_release_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_original_title(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_original_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_original_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_genre_ids(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_genre_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenreIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalOInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_genre_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_id(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_media_type(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_media_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_media_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_original_language(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_title(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_popularity(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_video(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_video(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Video, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_video(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_first_air_date(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_first_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstAirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_first_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_name(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KnownForItem_original_name(ctx context.Context, field graphql.CollectedField, obj *model.KnownForItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KnownForItem_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KnownForItem_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KnownForItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaCredit_cast(ctx context.Context, field graphql.CollectedField, obj *model.MediaCredit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaCredit_cast(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CreditCastItem)
	fc.Result = res
	return ec.marshalOCreditCastItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCastItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaCredit_cast(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaCredit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adult":
				return ec.fieldContext_CreditCastItem_adult(ctx, field)
			case "gender":
				return ec.fieldContext_CreditCastItem_gender(ctx, field)
			case "id":
				return ec.fieldContext_CreditCastItem_id(ctx, field)
			case "known_for_department":
				return ec.fieldContext_CreditCastItem_known_for_department(ctx, field)
			case "name":
				return ec.fieldContext_CreditCastItem_name(ctx, field)
			case "original_name":
				return ec.fieldContext_CreditCastItem_original_name(ctx, field)
			case "popularity":
				return ec.fieldContext_CreditCastItem_popularity(ctx, field)
			case "profile_path":
				return ec.fieldContext_CreditCastItem_profile_path(ctx, field)
			case "cast_id":
				return ec.fieldContext_CreditCastItem_cast_id(ctx, field)
			case "character":
				return ec.fieldContext_CreditCastItem_character(ctx, field)
			case "credit_id":
				return ec.fieldContext_CreditCastItem_credit_id(ctx, field)
			case "order":
				return ec.fieldContext_CreditCastItem_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreditCastItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaCredit_crew(ctx context.Context, field graphql.CollectedField, obj *model.MediaCredit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaCredit_crew(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Crew, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CreditCrewItem)
	fc.Result = res
	return ec.marshalOCreditCrewItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCrewItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaCredit_crew(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaCredit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adult":
				return ec.fieldContext_CreditCrewItem_adult(ctx, field)
			case "gender":
				return ec.fieldContext_CreditCrewItem_gender(ctx, field)
			case "id":
				return ec.fieldContext_CreditCrewItem_id(ctx, field)
			case "known_for_department":
				return ec.fieldContext_CreditCrewItem_known_for_department(ctx, field)
			case "name":
				return ec.fieldContext_CreditCrewItem_name(ctx, field)
			case "original_name":
				return ec.fieldContext_CreditCrewItem_original_name(ctx, field)
			case "popularity":
				return ec.fieldContext_CreditCrewItem_popularity(ctx, field)
			case "profile_path":
				return ec.fieldContext_CreditCrewItem_profile_path(ctx, field)
			case "credit_id":
				return ec.fieldContext_CreditCrewItem_credit_id(ctx, field)
			case "department":
				return ec.fieldContext_CreditCrewItem_department(ctx, field)
			case "job":
				return ec.fieldContext_CreditCrewItem_job(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreditCrewItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImages_backdrops(ctx context.Context, field graphql.CollectedField, obj *model.MediaImages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImages_backdrops(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Backdrops, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ImageItem)
	fc.Result = res
	return ec.marshalOImageItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐImageItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImages_backdrops(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "aspect_ratio":
				return ec.fieldContext_ImageItem_aspect_ratio(ctx, field)
			case "file_path":
				return ec.fieldContext_ImageItem_file_path(ctx, field)
			case "height":
				return ec.fieldContext_ImageItem_height(ctx, field)
			case "iso_639_1":
				return ec.fieldContext_ImageItem_iso_639_1(ctx, field)
			case "vote_average":
				return ec.fieldContext_ImageItem_vote_average(ctx, field)
			case "vote_count":
				return ec.fieldContext_ImageItem_vote_count(ctx, field)
			case "width":
				return ec.fieldContext_ImageItem_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaImages_posters(ctx context.Context, field graphql.CollectedField, obj *model.MediaImages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaImages_posters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Posters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ImageItem)
	fc.Result = res
	return ec.marshalOImageItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐImageItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaImages_posters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaImages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "aspect_ratio":
				return ec.fieldContext_ImageItem_aspect_ratio(ctx, field)
			case "file_path":
				return ec.fieldContext_ImageItem_file_path(ctx, field)
			case "height":
				return ec.fieldContext_ImageItem_height(ctx, field)
			case "iso_639_1":
				return ec.fieldContext_ImageItem_iso_639_1(ctx, field)
			case "vote_average":
				return ec.fieldContext_ImageItem_vote_average(ctx, field)
			case "vote_count":
				return ec.fieldContext_ImageItem_vote_count(ctx, field)
			case "width":
				return ec.fieldContext_ImageItem_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaVideos_results(ctx context.Context, field graphql.CollectedField, obj *model.MediaVideos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaVideos_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.VideoItem)
	fc.Result = res
	return ec.marshalOVideoItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐVideoItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaVideos_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaVideos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iso_639_1":
				return ec.fieldContext_VideoItem_iso_639_1(ctx, field)
			case "iso_3166_1":
				return ec.fieldContext_VideoItem_iso_3166_1(ctx, field)
			case "name":
				return ec.fieldContext_VideoItem_name(ctx, field)
			case "key":
				return ec.fieldContext_VideoItem_key(ctx, field)
			case "site":
				return ec.fieldContext_VideoItem_site(ctx, field)
			case "size":
				return ec.fieldContext_VideoItem_size(ctx, field)
			case "type":
				return ec.fieldContext_VideoItem_type(ctx, field)
			case "official":
				return ec.fieldContext_VideoItem_official(ctx, field)
			case "published_at":
				return ec.fieldContext_VideoItem_published_at(ctx, field)
			case "id":
				return ec.fieldContext_VideoItem_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VideoItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Movie_detail(ctx context.Context, field graphql.CollectedField, obj *model.Movie) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Movie_detail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Detail(rctx, obj, fc.Args["id"].(int), fc.Args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MovieDetail)
	fc.Result = res
	return ec.marshalNMovieDetail2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Movie_detail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "adult":
				return ec.fieldContext_MovieDetail_adult(ctx, field)
			case "backdrop_path":
				return ec.fieldContext_MovieDetail_backdrop_path(ctx, field)
			case "budget":
				return ec.fieldContext_MovieDetail_budget(ctx, field)
			case "genres":
				return ec.fieldContext_MovieDetail_genres(ctx, field)
			case "homepage":
				return ec.fieldContext_MovieDetail_homepage(ctx, field)
			case "id":
				return ec.fieldContext_MovieDetail_id(ctx, field)
			case "imdb_id":
				return ec.fieldContext_MovieDetail_imdb_id(ctx, field)
			case "original_language":
				return ec.fieldContext_MovieDetail_original_language(ctx, field)
			case "original_title":
				return ec.fieldContext_MovieDetail_original_title(ctx, field)
			case "overview":
				return ec.fieldContext_MovieDetail_overview(ctx, field)
			case "popularity":
				return ec.fieldContext_MovieDetail_popularity(ctx, field)
			case "poster_path":
				return ec.fieldContext_MovieDetail_poster_path(ctx, field)
			case "production_companies":
				return ec.fieldContext_MovieDetail_production_companies(ctx, field)
			case "production_countries":
				return ec.fieldContext_MovieDetail_production_countries(ctx, field)
			case "release_date":
				return ec.fieldContext_MovieDetail_release_date(ctx, field)
			case "revenue":
				return ec.fieldContext_MovieDetail_revenue(ctx, field)
			case "runtime":
				return ec.fieldContext_MovieDetail_runtime(ctx, field)
			case "spoken_languages":
				return ec.fieldContext_MovieDetail_spoken_languages(ctx, field)
			case "status":
				return ec.fieldContext_MovieDetail_status(ctx, field)
			case "tagline":
				return ec.fieldContext_MovieDetail_tagline(ctx, field)
			case "title":
				return ec.fieldContext_MovieDetail_title(ctx, field)
			case "video":
				return ec.fieldContext_MovieDetail_video(ctx, field)
			case "vote_average":
				return ec.fieldContext_MovieDetail_vote_average(ctx, field)
			case "vote_count":
				return ec.fieldContext_MovieDetail_vote_count(ctx, field)
			case "credits":
				return ec.fieldContext_MovieDetail_credits(ctx, field)
			case "videos":
				return ec.fieldContext_MovieDetail_videos(ctx, field)
			case "images":
				return ec.fieldContext_MovieDetail_images(ctx, field)
			case "recommendations":
				return ec.fieldContext_MovieDetail_recommendations(ctx, field)
			case "similar":
				return ec.fieldContext_MovieDetail_similar(ctx, field)
			case "imdb_rating":
				return ec.fieldContext_MovieDetail_imdb_rating(ctx, field)
			case "external_ids":
				return ec.fieldContext_MovieDetail_external_ids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieDetail", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Movie_detail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Movie_popular(ctx context.Context, field graphql.CollectedField, obj *model.Movie) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Movie_popular(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Popular(rctx, obj, fc.Args["page"].(*int), fc.Args["language"].(*string), fc.Args["region"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MovieList)
	fc.Result = res
	return ec.marshalNMovieList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Movie_popular(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_MovieList_page(ctx, field)
			case "results":
				return ec.fieldContext_MovieList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_MovieList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_MovieList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Movie_popular_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Movie_top_rated(ctx context.Context, field graphql.CollectedField, obj *model.Movie) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Movie_top_rated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().TopRated(rctx, obj, fc.Args["page"].(*int), fc.Args["language"].(*string), fc.Args["region"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MovieList)
	fc.Result = res
	return ec.marshalNMovieList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Movie_top_rated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_MovieList_page(ctx, field)
			case "results":
				return ec.fieldContext_MovieList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_MovieList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_MovieList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Movie_top_rated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Movie_upcoming(ctx context.Context, field graphql.CollectedField, obj *model.Movie) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Movie_upcoming(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Movie().Upcoming(rctx, obj, fc.Args["page"].(*int), fc.Args["language"].(*string), fc.Args["region"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MovieList)
	fc.Result = res
	return ec.marshalNMovieList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Movie_upcoming(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Movie",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_MovieList_page(ctx, field)
			case "results":
				return ec.fieldContext_MovieList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_MovieList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_MovieList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Movie_upcoming_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_adult(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_budget(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_budget(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Budget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_budget(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_genres(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_genres(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Genres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Genre)
	fc.Result = res
	return ec.marshalOGenre2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐGenreᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_genres(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Genre_id(ctx, field)
			case "name":
				return ec.fieldContext_Genre_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Genre", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_homepage(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_homepage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Homepage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_homepage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_imdb_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_imdb_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImdbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_imdb_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_original_language(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_original_title(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_original_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_original_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_overview(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_popularity(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_production_companies(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_production_companies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionCompanies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductionCompany)
	fc.Result = res
	return ec.marshalOProductionCompany2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_production_companies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ProductionCompany_name(ctx, field)
			case "id":
				return ec.fieldContext_ProductionCompany_id(ctx, field)
			case "logo_path":
				return ec.fieldContext_ProductionCompany_logo_path(ctx, field)
			case "origin_country":
				return ec.fieldContext_ProductionCompany_origin_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductionCompany", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_production_countries(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_production_countries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionCountries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductionCountry)
	fc.Result = res
	return ec.marshalOProductionCountry2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCountryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_production_countries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iso_3166_1":
				return ec.fieldContext_ProductionCountry_iso_3166_1(ctx, field)
			case "name":
				return ec.fieldContext_ProductionCountry_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductionCountry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_release_date(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_release_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_release_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_revenue(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_revenue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revenue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_revenue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_runtime(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_runtime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Runtime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_runtime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_spoken_languages(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_spoken_languages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpokenLanguages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SpokenLanguage)
	fc.Result = res
	return ec.marshalOSpokenLanguage2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSpokenLanguageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_spoken_languages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iso_639_1":
				return ec.fieldContext_SpokenLanguage_iso_639_1(ctx, field)
			case "name":
				return ec.fieldContext_SpokenLanguage_name(ctx, field)
			case "english_name":
				return ec.fieldContext_SpokenLanguage_english_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SpokenLanguage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_status(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_tagline(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_tagline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tagline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_tagline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_title(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_video(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_video(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Video, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_video(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_credits(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_credits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MediaCredit)
	fc.Result = res
	return ec.marshalNMediaCredit2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaCredit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_credits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cast":
				return ec.fieldContext_MediaCredit_cast(ctx, field)
			case "crew":
				return ec.fieldContext_MediaCredit_crew(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaCredit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_videos(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_videos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Videos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MediaVideos)
	fc.Result = res
	return ec.marshalNMediaVideos2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaVideos(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_videos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "results":
				return ec.fieldContext_MediaVideos_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaVideos", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_images(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MediaImages)
	fc.Result = res
	return ec.marshalNMediaImages2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaImages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "backdrops":
				return ec.fieldContext_MediaImages_backdrops(ctx, field)
			case "posters":
				return ec.fieldContext_MediaImages_posters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaImages", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_recommendations(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_recommendations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recommendations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MovieList)
	fc.Result = res
	return ec.marshalNMovieList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_recommendations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_MovieList_page(ctx, field)
			case "results":
				return ec.fieldContext_MovieList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_MovieList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_MovieList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MovieDetail_recommendations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_similar(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_similar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Similar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MovieList)
	fc.Result = res
	return ec.marshalNMovieList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_similar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_MovieList_page(ctx, field)
			case "results":
				return ec.fieldContext_MovieList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_MovieList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_MovieList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_MovieDetail_similar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_imdb_rating(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_imdb_rating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImdbRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IMDBRating)
	fc.Result = res
	return ec.marshalOIMDBRating2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐIMDBRating(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_imdb_rating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_IMDBRating_count(ctx, field)
			case "star":
				return ec.fieldContext_IMDBRating_star(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IMDBRating", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieDetail_external_ids(ctx context.Context, field graphql.CollectedField, obj *model.MovieDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieDetail_external_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MovieExternalIds)
	fc.Result = res
	return ec.marshalOMovieExternalIds2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieExternalIds(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieDetail_external_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "imdb_id":
				return ec.fieldContext_MovieExternalIds_imdb_id(ctx, field)
			case "facebook_id":
				return ec.fieldContext_MovieExternalIds_facebook_id(ctx, field)
			case "twitter_id":
				return ec.fieldContext_MovieExternalIds_twitter_id(ctx, field)
			case "instagram_id":
				return ec.fieldContext_MovieExternalIds_instagram_id(ctx, field)
			case "wikidata_id":
				return ec.fieldContext_MovieExternalIds_wikidata_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieExternalIds", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieExternalIds_imdb_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieExternalIds_imdb_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImdbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieExternalIds_imdb_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieExternalIds_facebook_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieExternalIds_facebook_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacebookID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieExternalIds_facebook_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieExternalIds_twitter_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieExternalIds_twitter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieExternalIds_twitter_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieExternalIds_instagram_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieExternalIds_instagram_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstagramID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieExternalIds_instagram_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieExternalIds_wikidata_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieExternalIds_wikidata_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WikidataID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieExternalIds_wikidata_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieList_page(ctx context.Context, field graphql.CollectedField, obj *model.MovieList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieList_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieList_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieList_results(ctx context.Context, field graphql.CollectedField, obj *model.MovieList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieList_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.MovieListItem)
	fc.Result = res
	return ec.marshalNMovieListItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieListItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieList_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "poster_path":
				return ec.fieldContext_MovieListItem_poster_path(ctx, field)
			case "adult":
				return ec.fieldContext_MovieListItem_adult(ctx, field)
			case "overview":
				return ec.fieldContext_MovieListItem_overview(ctx, field)
			case "release_date":
				return ec.fieldContext_MovieListItem_release_date(ctx, field)
			case "genre_ids":
				return ec.fieldContext_MovieListItem_genre_ids(ctx, field)
			case "id":
				return ec.fieldContext_MovieListItem_id(ctx, field)
			case "original_title":
				return ec.fieldContext_MovieListItem_original_title(ctx, field)
			case "original_language":
				return ec.fieldContext_MovieListItem_original_language(ctx, field)
			case "title":
				return ec.fieldContext_MovieListItem_title(ctx, field)
			case "backdrop_path":
				return ec.fieldContext_MovieListItem_backdrop_path(ctx, field)
			case "popularity":
				return ec.fieldContext_MovieListItem_popularity(ctx, field)
			case "vote_count":
				return ec.fieldContext_MovieListItem_vote_count(ctx, field)
			case "video":
				return ec.fieldContext_MovieListItem_video(ctx, field)
			case "vote_average":
				return ec.fieldContext_MovieListItem_vote_average(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MovieListItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieList_total_results(ctx context.Context, field graphql.CollectedField, obj *model.MovieList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieList_total_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieList_total_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieList_total_pages(ctx context.Context, field graphql.CollectedField, obj *model.MovieList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieList_total_pages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieList_total_pages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_adult(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_overview(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_release_date(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_release_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_release_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_genre_ids(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_genre_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenreIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_genre_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_id(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_original_title(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_original_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_original_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_original_language(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_title(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_popularity(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_video(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_video(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Video, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_video(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MovieListItem_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.MovieListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MovieListItem_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MovieListItem_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MovieListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Network_name(ctx context.Context, field graphql.CollectedField, obj *model.Network) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Network_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Network_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Network",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Network_id(ctx context.Context, field graphql.CollectedField, obj *model.Network) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Network_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Network_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Network",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Network_logo_path(ctx context.Context, field graphql.CollectedField, obj *model.Network) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Network_logo_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Network_logo_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Network",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Network_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.Network) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Network_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Network_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Network",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _People_detail(ctx context.Context, field graphql.CollectedField, obj *model.People) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_People_detail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.People().Detail(rctx, obj, fc.Args["id"].(int), fc.Args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PersonDetail)
	fc.Result = res
	return ec.marshalNPersonDetail2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_People_detail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "People",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "birthday":
				return ec.fieldContext_PersonDetail_birthday(ctx, field)
			case "known_for_department":
				return ec.fieldContext_PersonDetail_known_for_department(ctx, field)
			case "deathday":
				return ec.fieldContext_PersonDetail_deathday(ctx, field)
			case "id":
				return ec.fieldContext_PersonDetail_id(ctx, field)
			case "name":
				return ec.fieldContext_PersonDetail_name(ctx, field)
			case "also_known_as":
				return ec.fieldContext_PersonDetail_also_known_as(ctx, field)
			case "gender":
				return ec.fieldContext_PersonDetail_gender(ctx, field)
			case "biography":
				return ec.fieldContext_PersonDetail_biography(ctx, field)
			case "popularity":
				return ec.fieldContext_PersonDetail_popularity(ctx, field)
			case "place_of_birth":
				return ec.fieldContext_PersonDetail_place_of_birth(ctx, field)
			case "profile_path":
				return ec.fieldContext_PersonDetail_profile_path(ctx, field)
			case "adult":
				return ec.fieldContext_PersonDetail_adult(ctx, field)
			case "imdb_id":
				return ec.fieldContext_PersonDetail_imdb_id(ctx, field)
			case "homepage":
				return ec.fieldContext_PersonDetail_homepage(ctx, field)
			case "external_ids":
				return ec.fieldContext_PersonDetail_external_ids(ctx, field)
			case "images":
				return ec.fieldContext_PersonDetail_images(ctx, field)
			case "combined_credits":
				return ec.fieldContext_PersonDetail_combined_credits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonDetail", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_People_detail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _People_popular(ctx context.Context, field graphql.CollectedField, obj *model.People) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_People_popular(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.People().Popular(rctx, obj, fc.Args["language"].(*string), fc.Args["page"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PopularPeople)
	fc.Result = res
	return ec.marshalNPopularPeople2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPopularPeople(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_People_popular(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "People",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_PopularPeople_page(ctx, field)
			case "results":
				return ec.fieldContext_PopularPeople_results(ctx, field)
			case "total_results":
				return ec.fieldContext_PopularPeople_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_PopularPeople_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PopularPeople", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_People_popular_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_original_language(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_episode_count(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_episode_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_episode_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_overview(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_original_name(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_genre_ids(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_genre_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenreIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalOInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_genre_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_name(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_media_type(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_media_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_media_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_first_air_date(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_first_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstAirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_first_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_character(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_character(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Character, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_character(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_popularity(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_credit_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_credit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_credit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_original_title(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_original_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_original_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_video(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_video(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Video, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_video(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_release_date(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_release_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_release_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_title(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCast_adult(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCast) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCast_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCast_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCast",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_department(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Department, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_original_language(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_episode_count(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_episode_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_episode_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_job(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_job(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Job, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_job(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_overview(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_original_name(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_name(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_media_type(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_media_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_media_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_popularity(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_credit_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_credit_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreditID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_credit_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_first_air_date(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_first_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstAirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_first_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_genre_ids(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_genre_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenreIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalOInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_genre_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_original_title(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_original_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_original_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_video(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_video(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Video, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_video(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_title(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_adult(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCreditCrew_release_date(ctx context.Context, field graphql.CollectedField, obj *model.PersonCreditCrew) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCreditCrew_release_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCreditCrew_release_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCreditCrew",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCredits_cast(ctx context.Context, field graphql.CollectedField, obj *model.PersonCredits) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCredits_cast(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cast, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PersonCreditCast)
	fc.Result = res
	return ec.marshalOPersonCreditCast2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCastᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCredits_cast(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCredits",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PersonCreditCast_id(ctx, field)
			case "original_language":
				return ec.fieldContext_PersonCreditCast_original_language(ctx, field)
			case "episode_count":
				return ec.fieldContext_PersonCreditCast_episode_count(ctx, field)
			case "overview":
				return ec.fieldContext_PersonCreditCast_overview(ctx, field)
			case "origin_country":
				return ec.fieldContext_PersonCreditCast_origin_country(ctx, field)
			case "original_name":
				return ec.fieldContext_PersonCreditCast_original_name(ctx, field)
			case "genre_ids":
				return ec.fieldContext_PersonCreditCast_genre_ids(ctx, field)
			case "name":
				return ec.fieldContext_PersonCreditCast_name(ctx, field)
			case "media_type":
				return ec.fieldContext_PersonCreditCast_media_type(ctx, field)
			case "poster_path":
				return ec.fieldContext_PersonCreditCast_poster_path(ctx, field)
			case "first_air_date":
				return ec.fieldContext_PersonCreditCast_first_air_date(ctx, field)
			case "vote_average":
				return ec.fieldContext_PersonCreditCast_vote_average(ctx, field)
			case "vote_count":
				return ec.fieldContext_PersonCreditCast_vote_count(ctx, field)
			case "character":
				return ec.fieldContext_PersonCreditCast_character(ctx, field)
			case "backdrop_path":
				return ec.fieldContext_PersonCreditCast_backdrop_path(ctx, field)
			case "popularity":
				return ec.fieldContext_PersonCreditCast_popularity(ctx, field)
			case "credit_id":
				return ec.fieldContext_PersonCreditCast_credit_id(ctx, field)
			case "original_title":
				return ec.fieldContext_PersonCreditCast_original_title(ctx, field)
			case "video":
				return ec.fieldContext_PersonCreditCast_video(ctx, field)
			case "release_date":
				return ec.fieldContext_PersonCreditCast_release_date(ctx, field)
			case "title":
				return ec.fieldContext_PersonCreditCast_title(ctx, field)
			case "adult":
				return ec.fieldContext_PersonCreditCast_adult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonCreditCast", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonCredits_crew(ctx context.Context, field graphql.CollectedField, obj *model.PersonCredits) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonCredits_crew(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Crew, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PersonCreditCrew)
	fc.Result = res
	return ec.marshalOPersonCreditCrew2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCrewᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonCredits_crew(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonCredits",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PersonCreditCrew_id(ctx, field)
			case "department":
				return ec.fieldContext_PersonCreditCrew_department(ctx, field)
			case "original_language":
				return ec.fieldContext_PersonCreditCrew_original_language(ctx, field)
			case "episode_count":
				return ec.fieldContext_PersonCreditCrew_episode_count(ctx, field)
			case "job":
				return ec.fieldContext_PersonCreditCrew_job(ctx, field)
			case "overview":
				return ec.fieldContext_PersonCreditCrew_overview(ctx, field)
			case "origin_country":
				return ec.fieldContext_PersonCreditCrew_origin_country(ctx, field)
			case "original_name":
				return ec.fieldContext_PersonCreditCrew_original_name(ctx, field)
			case "vote_count":
				return ec.fieldContext_PersonCreditCrew_vote_count(ctx, field)
			case "name":
				return ec.fieldContext_PersonCreditCrew_name(ctx, field)
			case "media_type":
				return ec.fieldContext_PersonCreditCrew_media_type(ctx, field)
			case "popularity":
				return ec.fieldContext_PersonCreditCrew_popularity(ctx, field)
			case "credit_id":
				return ec.fieldContext_PersonCreditCrew_credit_id(ctx, field)
			case "backdrop_path":
				return ec.fieldContext_PersonCreditCrew_backdrop_path(ctx, field)
			case "first_air_date":
				return ec.fieldContext_PersonCreditCrew_first_air_date(ctx, field)
			case "vote_average":
				return ec.fieldContext_PersonCreditCrew_vote_average(ctx, field)
			case "genre_ids":
				return ec.fieldContext_PersonCreditCrew_genre_ids(ctx, field)
			case "poster_path":
				return ec.fieldContext_PersonCreditCrew_poster_path(ctx, field)
			case "original_title":
				return ec.fieldContext_PersonCreditCrew_original_title(ctx, field)
			case "video":
				return ec.fieldContext_PersonCreditCrew_video(ctx, field)
			case "title":
				return ec.fieldContext_PersonCreditCrew_title(ctx, field)
			case "adult":
				return ec.fieldContext_PersonCreditCrew_adult(ctx, field)
			case "release_date":
				return ec.fieldContext_PersonCreditCrew_release_date(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonCreditCrew", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_birthday(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_birthday(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_known_for_department(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_known_for_department(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KnownForDepartment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_known_for_department(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_deathday(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_deathday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deathday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_deathday(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_name(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_also_known_as(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_also_known_as(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlsoKnownAs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_also_known_as(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_gender(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_biography(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_biography(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Biography, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_biography(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_popularity(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_place_of_birth(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_place_of_birth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlaceOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_place_of_birth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_profile_path(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_profile_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_profile_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_adult(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_imdb_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_imdb_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImdbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_imdb_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_homepage(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_homepage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Homepage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_homepage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_external_ids(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_external_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PersonExternalIds)
	fc.Result = res
	return ec.marshalOPersonExternalIds2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonExternalIds(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_external_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "imdb_id":
				return ec.fieldContext_PersonExternalIds_imdb_id(ctx, field)
			case "facebook_id":
				return ec.fieldContext_PersonExternalIds_facebook_id(ctx, field)
			case "freebase_mid":
				return ec.fieldContext_PersonExternalIds_freebase_mid(ctx, field)
			case "freebase_id":
				return ec.fieldContext_PersonExternalIds_freebase_id(ctx, field)
			case "tvrage_id":
				return ec.fieldContext_PersonExternalIds_tvrage_id(ctx, field)
			case "twitter_id":
				return ec.fieldContext_PersonExternalIds_twitter_id(ctx, field)
			case "instagram_id":
				return ec.fieldContext_PersonExternalIds_instagram_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonExternalIds", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_images(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PersonImages)
	fc.Result = res
	return ec.marshalOPersonImages2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonImages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "profiles":
				return ec.fieldContext_PersonImages_profiles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonImages", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonDetail_combined_credits(ctx context.Context, field graphql.CollectedField, obj *model.PersonDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonDetail_combined_credits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CombinedCredits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PersonCredits)
	fc.Result = res
	return ec.marshalOPersonCredits2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCredits(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonDetail_combined_credits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cast":
				return ec.fieldContext_PersonCredits_cast(ctx, field)
			case "crew":
				return ec.fieldContext_PersonCredits_crew(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PersonCredits", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonExternalIds_imdb_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonExternalIds_imdb_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImdbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonExternalIds_imdb_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonExternalIds_facebook_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonExternalIds_facebook_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacebookID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonExternalIds_facebook_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonExternalIds_freebase_mid(ctx context.Context, field graphql.CollectedField, obj *model.PersonExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonExternalIds_freebase_mid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreebaseMid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonExternalIds_freebase_mid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonExternalIds_freebase_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonExternalIds_freebase_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreebaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonExternalIds_freebase_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonExternalIds_tvrage_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonExternalIds_tvrage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TvrageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonExternalIds_tvrage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonExternalIds_twitter_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonExternalIds_twitter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonExternalIds_twitter_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonExternalIds_instagram_id(ctx context.Context, field graphql.CollectedField, obj *model.PersonExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonExternalIds_instagram_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstagramID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonExternalIds_instagram_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PersonImages_profiles(ctx context.Context, field graphql.CollectedField, obj *model.PersonImages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PersonImages_profiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ImageItem)
	fc.Result = res
	return ec.marshalOImageItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐImageItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PersonImages_profiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PersonImages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "aspect_ratio":
				return ec.fieldContext_ImageItem_aspect_ratio(ctx, field)
			case "file_path":
				return ec.fieldContext_ImageItem_file_path(ctx, field)
			case "height":
				return ec.fieldContext_ImageItem_height(ctx, field)
			case "iso_639_1":
				return ec.fieldContext_ImageItem_iso_639_1(ctx, field)
			case "vote_average":
				return ec.fieldContext_ImageItem_vote_average(ctx, field)
			case "vote_count":
				return ec.fieldContext_ImageItem_vote_count(ctx, field)
			case "width":
				return ec.fieldContext_ImageItem_width(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ImageItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPeople_page(ctx context.Context, field graphql.CollectedField, obj *model.PopularPeople) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPeople_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPeople_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPeople",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPeople_results(ctx context.Context, field graphql.CollectedField, obj *model.PopularPeople) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPeople_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.PopularPerson)
	fc.Result = res
	return ec.marshalNPopularPerson2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPopularPersonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPeople_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPeople",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "profile_path":
				return ec.fieldContext_PopularPerson_profile_path(ctx, field)
			case "adult":
				return ec.fieldContext_PopularPerson_adult(ctx, field)
			case "id":
				return ec.fieldContext_PopularPerson_id(ctx, field)
			case "known_for":
				return ec.fieldContext_PopularPerson_known_for(ctx, field)
			case "name":
				return ec.fieldContext_PopularPerson_name(ctx, field)
			case "popularity":
				return ec.fieldContext_PopularPerson_popularity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PopularPerson", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPeople_total_results(ctx context.Context, field graphql.CollectedField, obj *model.PopularPeople) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPeople_total_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPeople_total_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPeople",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPeople_total_pages(ctx context.Context, field graphql.CollectedField, obj *model.PopularPeople) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPeople_total_pages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPeople_total_pages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPeople",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPerson_profile_path(ctx context.Context, field graphql.CollectedField, obj *model.PopularPerson) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPerson_profile_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfilePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPerson_profile_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPerson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPerson_adult(ctx context.Context, field graphql.CollectedField, obj *model.PopularPerson) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPerson_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPerson_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPerson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPerson_id(ctx context.Context, field graphql.CollectedField, obj *model.PopularPerson) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPerson_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPerson_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPerson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPerson_known_for(ctx context.Context, field graphql.CollectedField, obj *model.PopularPerson) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPerson_known_for(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KnownFor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.KnownForItem)
	fc.Result = res
	return ec.marshalOKnownForItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐKnownForItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPerson_known_for(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPerson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "poster_path":
				return ec.fieldContext_KnownForItem_poster_path(ctx, field)
			case "adult":
				return ec.fieldContext_KnownForItem_adult(ctx, field)
			case "overview":
				return ec.fieldContext_KnownForItem_overview(ctx, field)
			case "release_date":
				return ec.fieldContext_KnownForItem_release_date(ctx, field)
			case "original_title":
				return ec.fieldContext_KnownForItem_original_title(ctx, field)
			case "genre_ids":
				return ec.fieldContext_KnownForItem_genre_ids(ctx, field)
			case "id":
				return ec.fieldContext_KnownForItem_id(ctx, field)
			case "media_type":
				return ec.fieldContext_KnownForItem_media_type(ctx, field)
			case "original_language":
				return ec.fieldContext_KnownForItem_original_language(ctx, field)
			case "title":
				return ec.fieldContext_KnownForItem_title(ctx, field)
			case "backdrop_path":
				return ec.fieldContext_KnownForItem_backdrop_path(ctx, field)
			case "popularity":
				return ec.fieldContext_KnownForItem_popularity(ctx, field)
			case "vote_count":
				return ec.fieldContext_KnownForItem_vote_count(ctx, field)
			case "video":
				return ec.fieldContext_KnownForItem_video(ctx, field)
			case "vote_average":
				return ec.fieldContext_KnownForItem_vote_average(ctx, field)
			case "first_air_date":
				return ec.fieldContext_KnownForItem_first_air_date(ctx, field)
			case "origin_country":
				return ec.fieldContext_KnownForItem_origin_country(ctx, field)
			case "name":
				return ec.fieldContext_KnownForItem_name(ctx, field)
			case "original_name":
				return ec.fieldContext_KnownForItem_original_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KnownForItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPerson_name(ctx context.Context, field graphql.CollectedField, obj *model.PopularPerson) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPerson_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPerson_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPerson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PopularPerson_popularity(ctx context.Context, field graphql.CollectedField, obj *model.PopularPerson) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PopularPerson_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PopularPerson_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PopularPerson",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductionCompany_name(ctx context.Context, field graphql.CollectedField, obj *model.ProductionCompany) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductionCompany_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductionCompany_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductionCompany",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductionCompany_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductionCompany) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductionCompany_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductionCompany_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductionCompany",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductionCompany_logo_path(ctx context.Context, field graphql.CollectedField, obj *model.ProductionCompany) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductionCompany_logo_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductionCompany_logo_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductionCompany",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductionCompany_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.ProductionCompany) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductionCompany_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductionCompany_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductionCompany",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductionCountry_iso_3166_1(ctx context.Context, field graphql.CollectedField, obj *model.ProductionCountry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductionCountry_iso_3166_1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso3166_1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductionCountry_iso_3166_1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductionCountry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductionCountry_name(ctx context.Context, field graphql.CollectedField, obj *model.ProductionCountry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductionCountry_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductionCountry_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductionCountry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_introduction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_introduction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Introduction(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Introduction)
	fc.Result = res
	return ec.marshalNIntroduction2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐIntroduction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_introduction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "Name":
				return ec.fieldContext_Introduction_Name(ctx, field)
			case "Message":
				return ec.fieldContext_Introduction_Message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Introduction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_movie(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_movie(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Movie(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Movie)
	fc.Result = res
	return ec.marshalNMovie2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovie(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_movie(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "detail":
				return ec.fieldContext_Movie_detail(ctx, field)
			case "popular":
				return ec.fieldContext_Movie_popular(ctx, field)
			case "top_rated":
				return ec.fieldContext_Movie_top_rated(ctx, field)
			case "upcoming":
				return ec.fieldContext_Movie_upcoming(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Movie", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_people(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_people(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().People(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.People)
	fc.Result = res
	return ec.marshalNPeople2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPeople(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_people(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "detail":
				return ec.fieldContext_People_detail(ctx, field)
			case "popular":
				return ec.fieldContext_People_popular(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type People", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_trending(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_trending(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Trending(rctx, fc.Args["media_type"].(string), fc.Args["time_window"].(string), fc.Args["page"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Trending)
	fc.Result = res
	return ec.marshalNTrending2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTrending(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_trending(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_Trending_page(ctx, field)
			case "results":
				return ec.fieldContext_Trending_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_Trending_total_pages(ctx, field)
			case "total_results":
				return ec.fieldContext_Trending_total_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Trending", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_trending_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_tv(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_tv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Tv(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Tv)
	fc.Result = res
	return ec.marshalNTV2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTv(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_tv(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "detail":
				return ec.fieldContext_TV_detail(ctx, field)
			case "popular":
				return ec.fieldContext_TV_popular(ctx, field)
			case "top_rated":
				return ec.fieldContext_TV_top_rated(ctx, field)
			case "on_the_air":
				return ec.fieldContext_TV_on_the_air(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TV", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_air_date(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_episode_count(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_episode_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_episode_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_id(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_name(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_overview(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_season_number(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_season_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SeasonNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_season_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpokenLanguage_iso_639_1(ctx context.Context, field graphql.CollectedField, obj *model.SpokenLanguage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpokenLanguage_iso_639_1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso639_1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpokenLanguage_iso_639_1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpokenLanguage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpokenLanguage_name(ctx context.Context, field graphql.CollectedField, obj *model.SpokenLanguage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpokenLanguage_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpokenLanguage_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpokenLanguage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpokenLanguage_english_name(ctx context.Context, field graphql.CollectedField, obj *model.SpokenLanguage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpokenLanguage_english_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnglishName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpokenLanguage_english_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpokenLanguage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TV_detail(ctx context.Context, field graphql.CollectedField, obj *model.Tv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TV_detail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TV().Detail(rctx, obj, fc.Args["id"].(int), fc.Args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TVDetail)
	fc.Result = res
	return ec.marshalNTVDetail2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVDetail(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TV_detail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TV",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "backdrop_path":
				return ec.fieldContext_TVDetail_backdrop_path(ctx, field)
			case "created_by":
				return ec.fieldContext_TVDetail_created_by(ctx, field)
			case "episode_runtime":
				return ec.fieldContext_TVDetail_episode_runtime(ctx, field)
			case "first_air_date":
				return ec.fieldContext_TVDetail_first_air_date(ctx, field)
			case "genres":
				return ec.fieldContext_TVDetail_genres(ctx, field)
			case "homepage":
				return ec.fieldContext_TVDetail_homepage(ctx, field)
			case "id":
				return ec.fieldContext_TVDetail_id(ctx, field)
			case "in_production":
				return ec.fieldContext_TVDetail_in_production(ctx, field)
			case "languages":
				return ec.fieldContext_TVDetail_languages(ctx, field)
			case "last_air_date":
				return ec.fieldContext_TVDetail_last_air_date(ctx, field)
			case "last_episode_to_air":
				return ec.fieldContext_TVDetail_last_episode_to_air(ctx, field)
			case "name":
				return ec.fieldContext_TVDetail_name(ctx, field)
			case "networks":
				return ec.fieldContext_TVDetail_networks(ctx, field)
			case "number_of_episodes":
				return ec.fieldContext_TVDetail_number_of_episodes(ctx, field)
			case "number_of_seasons":
				return ec.fieldContext_TVDetail_number_of_seasons(ctx, field)
			case "origin_country":
				return ec.fieldContext_TVDetail_origin_country(ctx, field)
			case "original_language":
				return ec.fieldContext_TVDetail_original_language(ctx, field)
			case "original_name":
				return ec.fieldContext_TVDetail_original_name(ctx, field)
			case "overview":
				return ec.fieldContext_TVDetail_overview(ctx, field)
			case "popularity":
				return ec.fieldContext_TVDetail_popularity(ctx, field)
			case "poster_path":
				return ec.fieldContext_TVDetail_poster_path(ctx, field)
			case "production_companies":
				return ec.fieldContext_TVDetail_production_companies(ctx, field)
			case "production_countries":
				return ec.fieldContext_TVDetail_production_countries(ctx, field)
			case "seasons":
				return ec.fieldContext_TVDetail_seasons(ctx, field)
			case "spoken_languages":
				return ec.fieldContext_TVDetail_spoken_languages(ctx, field)
			case "status":
				return ec.fieldContext_TVDetail_status(ctx, field)
			case "tagline":
				return ec.fieldContext_TVDetail_tagline(ctx, field)
			case "type":
				return ec.fieldContext_TVDetail_type(ctx, field)
			case "vote_average":
				return ec.fieldContext_TVDetail_vote_average(ctx, field)
			case "vote_count":
				return ec.fieldContext_TVDetail_vote_count(ctx, field)
			case "credits":
				return ec.fieldContext_TVDetail_credits(ctx, field)
			case "videos":
				return ec.fieldContext_TVDetail_videos(ctx, field)
			case "images":
				return ec.fieldContext_TVDetail_images(ctx, field)
			case "recommendations":
				return ec.fieldContext_TVDetail_recommendations(ctx, field)
			case "similar":
				return ec.fieldContext_TVDetail_similar(ctx, field)
			case "imdb_rating":
				return ec.fieldContext_TVDetail_imdb_rating(ctx, field)
			case "external_ids":
				return ec.fieldContext_TVDetail_external_ids(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVDetail", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TV_detail_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TV_popular(ctx context.Context, field graphql.CollectedField, obj *model.Tv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TV_popular(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TV().Popular(rctx, obj, fc.Args["page"].(*int), fc.Args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TVList)
	fc.Result = res
	return ec.marshalNTVList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TV_popular(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TV",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_TVList_page(ctx, field)
			case "results":
				return ec.fieldContext_TVList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_TVList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_TVList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TV_popular_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TV_top_rated(ctx context.Context, field graphql.CollectedField, obj *model.Tv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TV_top_rated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TV().TopRated(rctx, obj, fc.Args["page"].(*int), fc.Args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TVList)
	fc.Result = res
	return ec.marshalNTVList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TV_top_rated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TV",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_TVList_page(ctx, field)
			case "results":
				return ec.fieldContext_TVList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_TVList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_TVList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TV_top_rated_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TV_on_the_air(ctx context.Context, field graphql.CollectedField, obj *model.Tv) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TV_on_the_air(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.TV().OnTheAir(rctx, obj, fc.Args["page"].(*int), fc.Args["language"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TVList)
	fc.Result = res
	return ec.marshalNTVList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TV_on_the_air(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TV",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_TVList_page(ctx, field)
			case "results":
				return ec.fieldContext_TVList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_TVList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_TVList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TV_on_the_air_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_created_by(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_created_by(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CreatedBy)
	fc.Result = res
	return ec.marshalOCreatedBy2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreatedByᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_created_by(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CreatedBy_id(ctx, field)
			case "credit_id":
				return ec.fieldContext_CreatedBy_credit_id(ctx, field)
			case "name":
				return ec.fieldContext_CreatedBy_name(ctx, field)
			case "gender":
				return ec.fieldContext_CreatedBy_gender(ctx, field)
			case "profile_path":
				return ec.fieldContext_CreatedBy_profile_path(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CreatedBy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_episode_runtime(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_episode_runtime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeRuntime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalOInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_episode_runtime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_first_air_date(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_first_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstAirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_first_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_genres(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_genres(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Genres, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Genre)
	fc.Result = res
	return ec.marshalOGenre2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐGenreᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_genres(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Genre_id(ctx, field)
			case "name":
				return ec.fieldContext_Genre_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Genre", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_homepage(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_homepage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Homepage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_homepage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_id(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_in_production(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_in_production(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProduction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_in_production(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_languages(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_languages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Languages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_languages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_last_air_date(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_last_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_last_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_last_episode_to_air(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_last_episode_to_air(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastEpisodeToAir, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Episode)
	fc.Result = res
	return ec.marshalOEpisode2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐEpisode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_last_episode_to_air(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "air_date":
				return ec.fieldContext_Episode_air_date(ctx, field)
			case "episode_number":
				return ec.fieldContext_Episode_episode_number(ctx, field)
			case "id":
				return ec.fieldContext_Episode_id(ctx, field)
			case "name":
				return ec.fieldContext_Episode_name(ctx, field)
			case "overview":
				return ec.fieldContext_Episode_overview(ctx, field)
			case "production_code":
				return ec.fieldContext_Episode_production_code(ctx, field)
			case "season_number":
				return ec.fieldContext_Episode_season_number(ctx, field)
			case "still_path":
				return ec.fieldContext_Episode_still_path(ctx, field)
			case "vote_average":
				return ec.fieldContext_Episode_vote_average(ctx, field)
			case "vote_count":
				return ec.fieldContext_Episode_vote_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Episode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_name(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_networks(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_networks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Networks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Network)
	fc.Result = res
	return ec.marshalONetwork2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐNetworkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_networks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Network_name(ctx, field)
			case "id":
				return ec.fieldContext_Network_id(ctx, field)
			case "logo_path":
				return ec.fieldContext_Network_logo_path(ctx, field)
			case "origin_country":
				return ec.fieldContext_Network_origin_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Network", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_number_of_episodes(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_number_of_episodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfEpisodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_number_of_episodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_number_of_seasons(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_number_of_seasons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfSeasons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_number_of_seasons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_original_language(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_original_name(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_overview(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_popularity(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_production_companies(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_production_companies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionCompanies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductionCompany)
	fc.Result = res
	return ec.marshalOProductionCompany2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCompanyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_production_companies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ProductionCompany_name(ctx, field)
			case "id":
				return ec.fieldContext_ProductionCompany_id(ctx, field)
			case "logo_path":
				return ec.fieldContext_ProductionCompany_logo_path(ctx, field)
			case "origin_country":
				return ec.fieldContext_ProductionCompany_origin_country(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductionCompany", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_production_countries(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_production_countries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionCountries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProductionCountry)
	fc.Result = res
	return ec.marshalOProductionCountry2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCountryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_production_countries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iso_3166_1":
				return ec.fieldContext_ProductionCountry_iso_3166_1(ctx, field)
			case "name":
				return ec.fieldContext_ProductionCountry_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductionCountry", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_seasons(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_seasons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seasons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Season)
	fc.Result = res
	return ec.marshalOSeason2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSeasonᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_seasons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "air_date":
				return ec.fieldContext_Season_air_date(ctx, field)
			case "episode_count":
				return ec.fieldContext_Season_episode_count(ctx, field)
			case "id":
				return ec.fieldContext_Season_id(ctx, field)
			case "name":
				return ec.fieldContext_Season_name(ctx, field)
			case "overview":
				return ec.fieldContext_Season_overview(ctx, field)
			case "poster_path":
				return ec.fieldContext_Season_poster_path(ctx, field)
			case "season_number":
				return ec.fieldContext_Season_season_number(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Season", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_spoken_languages(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_spoken_languages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpokenLanguages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SpokenLanguage)
	fc.Result = res
	return ec.marshalOSpokenLanguage2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSpokenLanguageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_spoken_languages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "iso_639_1":
				return ec.fieldContext_SpokenLanguage_iso_639_1(ctx, field)
			case "name":
				return ec.fieldContext_SpokenLanguage_name(ctx, field)
			case "english_name":
				return ec.fieldContext_SpokenLanguage_english_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SpokenLanguage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_status(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_tagline(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_tagline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tagline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_tagline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_type(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_credits(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_credits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Credits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MediaCredit)
	fc.Result = res
	return ec.marshalNMediaCredit2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaCredit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_credits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cast":
				return ec.fieldContext_MediaCredit_cast(ctx, field)
			case "crew":
				return ec.fieldContext_MediaCredit_crew(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaCredit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_videos(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_videos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Videos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MediaVideos)
	fc.Result = res
	return ec.marshalNMediaVideos2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaVideos(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_videos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "results":
				return ec.fieldContext_MediaVideos_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaVideos", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_images(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MediaImages)
	fc.Result = res
	return ec.marshalNMediaImages2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaImages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "backdrops":
				return ec.fieldContext_MediaImages_backdrops(ctx, field)
			case "posters":
				return ec.fieldContext_MediaImages_posters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaImages", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_recommendations(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_recommendations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recommendations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TVList)
	fc.Result = res
	return ec.marshalNTVList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_recommendations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_TVList_page(ctx, field)
			case "results":
				return ec.fieldContext_TVList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_TVList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_TVList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TVDetail_recommendations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_similar(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_similar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Similar, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.TVList)
	fc.Result = res
	return ec.marshalNTVList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVList(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_similar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "page":
				return ec.fieldContext_TVList_page(ctx, field)
			case "results":
				return ec.fieldContext_TVList_results(ctx, field)
			case "total_results":
				return ec.fieldContext_TVList_total_results(ctx, field)
			case "total_pages":
				return ec.fieldContext_TVList_total_pages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVList", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_TVDetail_similar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_imdb_rating(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_imdb_rating(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImdbRating, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IMDBRating)
	fc.Result = res
	return ec.marshalOIMDBRating2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐIMDBRating(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_imdb_rating(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "count":
				return ec.fieldContext_IMDBRating_count(ctx, field)
			case "star":
				return ec.fieldContext_IMDBRating_star(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IMDBRating", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVDetail_external_ids(ctx context.Context, field graphql.CollectedField, obj *model.TVDetail) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVDetail_external_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TVExternalIds)
	fc.Result = res
	return ec.marshalOTVExternalIds2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVExternalIds(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVDetail_external_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVDetail",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "imdb_id":
				return ec.fieldContext_TVExternalIds_imdb_id(ctx, field)
			case "freebase_mid":
				return ec.fieldContext_TVExternalIds_freebase_mid(ctx, field)
			case "freebase_id":
				return ec.fieldContext_TVExternalIds_freebase_id(ctx, field)
			case "tvdb_id":
				return ec.fieldContext_TVExternalIds_tvdb_id(ctx, field)
			case "tvrage_id":
				return ec.fieldContext_TVExternalIds_tvrage_id(ctx, field)
			case "facebook_id":
				return ec.fieldContext_TVExternalIds_facebook_id(ctx, field)
			case "instagram_id":
				return ec.fieldContext_TVExternalIds_instagram_id(ctx, field)
			case "twitter_id":
				return ec.fieldContext_TVExternalIds_twitter_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVExternalIds", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_imdb_id(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_imdb_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImdbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_imdb_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_freebase_mid(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_freebase_mid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreebaseMid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_freebase_mid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_freebase_id(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_freebase_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreebaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_freebase_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_tvdb_id(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_tvdb_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TvdbID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_tvdb_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_tvrage_id(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_tvrage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TvrageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_tvrage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_facebook_id(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_facebook_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FacebookID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_facebook_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_instagram_id(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_instagram_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstagramID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_instagram_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVExternalIds_twitter_id(ctx context.Context, field graphql.CollectedField, obj *model.TVExternalIds) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVExternalIds_twitter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwitterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVExternalIds_twitter_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVExternalIds",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVList_page(ctx context.Context, field graphql.CollectedField, obj *model.TVList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVList_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVList_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVList_results(ctx context.Context, field graphql.CollectedField, obj *model.TVList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVList_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TVListItem)
	fc.Result = res
	return ec.marshalNTVListItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVListItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVList_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "poster_path":
				return ec.fieldContext_TVListItem_poster_path(ctx, field)
			case "popularity":
				return ec.fieldContext_TVListItem_popularity(ctx, field)
			case "id":
				return ec.fieldContext_TVListItem_id(ctx, field)
			case "backdrop_path":
				return ec.fieldContext_TVListItem_backdrop_path(ctx, field)
			case "vote_average":
				return ec.fieldContext_TVListItem_vote_average(ctx, field)
			case "overview":
				return ec.fieldContext_TVListItem_overview(ctx, field)
			case "first_air_date":
				return ec.fieldContext_TVListItem_first_air_date(ctx, field)
			case "origin_country":
				return ec.fieldContext_TVListItem_origin_country(ctx, field)
			case "genre_ids":
				return ec.fieldContext_TVListItem_genre_ids(ctx, field)
			case "original_language":
				return ec.fieldContext_TVListItem_original_language(ctx, field)
			case "vote_count":
				return ec.fieldContext_TVListItem_vote_count(ctx, field)
			case "name":
				return ec.fieldContext_TVListItem_name(ctx, field)
			case "original_name":
				return ec.fieldContext_TVListItem_original_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TVListItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVList_total_results(ctx context.Context, field graphql.CollectedField, obj *model.TVList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVList_total_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVList_total_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVList_total_pages(ctx context.Context, field graphql.CollectedField, obj *model.TVList) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVList_total_pages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVList_total_pages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVList",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_popularity(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_id(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_overview(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_first_air_date(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_first_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstAirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_first_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_genre_ids(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_genre_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenreIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalOInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_genre_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_original_language(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_name(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TVListItem_original_name(ctx context.Context, field graphql.CollectedField, obj *model.TVListItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TVListItem_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TVListItem_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TVListItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trending_page(ctx context.Context, field graphql.CollectedField, obj *model.Trending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trending_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trending_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trending_results(ctx context.Context, field graphql.CollectedField, obj *model.Trending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trending_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TrendingItem)
	fc.Result = res
	return ec.marshalNTrendingItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTrendingItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trending_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "poster_path":
				return ec.fieldContext_TrendingItem_poster_path(ctx, field)
			case "adult":
				return ec.fieldContext_TrendingItem_adult(ctx, field)
			case "overview":
				return ec.fieldContext_TrendingItem_overview(ctx, field)
			case "release_date":
				return ec.fieldContext_TrendingItem_release_date(ctx, field)
			case "genre_ids":
				return ec.fieldContext_TrendingItem_genre_ids(ctx, field)
			case "id":
				return ec.fieldContext_TrendingItem_id(ctx, field)
			case "original_title":
				return ec.fieldContext_TrendingItem_original_title(ctx, field)
			case "original_language":
				return ec.fieldContext_TrendingItem_original_language(ctx, field)
			case "title":
				return ec.fieldContext_TrendingItem_title(ctx, field)
			case "backdrop_path":
				return ec.fieldContext_TrendingItem_backdrop_path(ctx, field)
			case "popularity":
				return ec.fieldContext_TrendingItem_popularity(ctx, field)
			case "vote_count":
				return ec.fieldContext_TrendingItem_vote_count(ctx, field)
			case "video":
				return ec.fieldContext_TrendingItem_video(ctx, field)
			case "vote_average":
				return ec.fieldContext_TrendingItem_vote_average(ctx, field)
			case "first_air_date":
				return ec.fieldContext_TrendingItem_first_air_date(ctx, field)
			case "origin_country":
				return ec.fieldContext_TrendingItem_origin_country(ctx, field)
			case "name":
				return ec.fieldContext_TrendingItem_name(ctx, field)
			case "original_name":
				return ec.fieldContext_TrendingItem_original_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TrendingItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trending_total_pages(ctx context.Context, field graphql.CollectedField, obj *model.Trending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trending_total_pages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trending_total_pages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Trending_total_results(ctx context.Context, field graphql.CollectedField, obj *model.Trending) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Trending_total_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Trending_total_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Trending",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_poster_path(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_poster_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PosterPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_poster_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_adult(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_adult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Adult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_adult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_overview(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_overview(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Overview, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_overview(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_release_date(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_release_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_release_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_genre_ids(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_genre_ids(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GenreIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]int)
	fc.Result = res
	return ec.marshalOInt2ᚕintᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_genre_ids(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_id(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_original_title(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_original_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalTitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_original_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_original_language(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_original_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalLanguage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_original_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_title(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_backdrop_path(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_backdrop_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackdropPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_backdrop_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_popularity(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_popularity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Popularity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_popularity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_vote_count(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_vote_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_vote_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_video(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_video(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Video, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_video(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_vote_average(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_vote_average(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VoteAverage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_vote_average(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_first_air_date(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_first_air_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstAirDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_first_air_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_origin_country(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_origin_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_origin_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_name(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TrendingItem_original_name(ctx context.Context, field graphql.CollectedField, obj *model.TrendingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TrendingItem_original_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TrendingItem_original_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TrendingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_iso_639_1(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_iso_639_1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso639_1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_iso_639_1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_iso_3166_1(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_iso_3166_1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iso3166_1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_iso_3166_1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_name(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_key(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_site(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_site(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Site, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_site(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_size(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_type(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_official(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_official(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Official, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_official(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_published_at(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_published_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_published_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VideoItem_id(ctx context.Context, field graphql.CollectedField, obj *model.VideoItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VideoItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VideoItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VideoItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var createdByImplementors = []string{"CreatedBy"}

func (ec *executionContext) _CreatedBy(ctx context.Context, sel ast.SelectionSet, obj *model.CreatedBy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createdByImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreatedBy")
		case "id":

			out.Values[i] = ec._CreatedBy_id(ctx, field, obj)

		case "credit_id":

			out.Values[i] = ec._CreatedBy_credit_id(ctx, field, obj)

		case "name":

			out.Values[i] = ec._CreatedBy_name(ctx, field, obj)

		case "gender":

			out.Values[i] = ec._CreatedBy_gender(ctx, field, obj)

		case "profile_path":

			out.Values[i] = ec._CreatedBy_profile_path(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creditCastItemImplementors = []string{"CreditCastItem"}

func (ec *executionContext) _CreditCastItem(ctx context.Context, sel ast.SelectionSet, obj *model.CreditCastItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creditCastItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreditCastItem")
		case "adult":

			out.Values[i] = ec._CreditCastItem_adult(ctx, field, obj)

		case "gender":

			out.Values[i] = ec._CreditCastItem_gender(ctx, field, obj)

		case "id":

			out.Values[i] = ec._CreditCastItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "known_for_department":

			out.Values[i] = ec._CreditCastItem_known_for_department(ctx, field, obj)

		case "name":

			out.Values[i] = ec._CreditCastItem_name(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._CreditCastItem_original_name(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._CreditCastItem_popularity(ctx, field, obj)

		case "profile_path":

			out.Values[i] = ec._CreditCastItem_profile_path(ctx, field, obj)

		case "cast_id":

			out.Values[i] = ec._CreditCastItem_cast_id(ctx, field, obj)

		case "character":

			out.Values[i] = ec._CreditCastItem_character(ctx, field, obj)

		case "credit_id":

			out.Values[i] = ec._CreditCastItem_credit_id(ctx, field, obj)

		case "order":

			out.Values[i] = ec._CreditCastItem_order(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creditCrewItemImplementors = []string{"CreditCrewItem"}

func (ec *executionContext) _CreditCrewItem(ctx context.Context, sel ast.SelectionSet, obj *model.CreditCrewItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creditCrewItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreditCrewItem")
		case "adult":

			out.Values[i] = ec._CreditCrewItem_adult(ctx, field, obj)

		case "gender":

			out.Values[i] = ec._CreditCrewItem_gender(ctx, field, obj)

		case "id":

			out.Values[i] = ec._CreditCrewItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "known_for_department":

			out.Values[i] = ec._CreditCrewItem_known_for_department(ctx, field, obj)

		case "name":

			out.Values[i] = ec._CreditCrewItem_name(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._CreditCrewItem_original_name(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._CreditCrewItem_popularity(ctx, field, obj)

		case "profile_path":

			out.Values[i] = ec._CreditCrewItem_profile_path(ctx, field, obj)

		case "credit_id":

			out.Values[i] = ec._CreditCrewItem_credit_id(ctx, field, obj)

		case "department":

			out.Values[i] = ec._CreditCrewItem_department(ctx, field, obj)

		case "job":

			out.Values[i] = ec._CreditCrewItem_job(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var episodeImplementors = []string{"Episode"}

func (ec *executionContext) _Episode(ctx context.Context, sel ast.SelectionSet, obj *model.Episode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, episodeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Episode")
		case "air_date":

			out.Values[i] = ec._Episode_air_date(ctx, field, obj)

		case "episode_number":

			out.Values[i] = ec._Episode_episode_number(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Episode_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Episode_name(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._Episode_overview(ctx, field, obj)

		case "production_code":

			out.Values[i] = ec._Episode_production_code(ctx, field, obj)

		case "season_number":

			out.Values[i] = ec._Episode_season_number(ctx, field, obj)

		case "still_path":

			out.Values[i] = ec._Episode_still_path(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._Episode_vote_average(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._Episode_vote_count(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var genreImplementors = []string{"Genre"}

func (ec *executionContext) _Genre(ctx context.Context, sel ast.SelectionSet, obj *model.Genre) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, genreImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Genre")
		case "id":

			out.Values[i] = ec._Genre_id(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Genre_name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iMDBRatingImplementors = []string{"IMDBRating"}

func (ec *executionContext) _IMDBRating(ctx context.Context, sel ast.SelectionSet, obj *model.IMDBRating) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iMDBRatingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IMDBRating")
		case "count":

			out.Values[i] = ec._IMDBRating_count(ctx, field, obj)

		case "star":

			out.Values[i] = ec._IMDBRating_star(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var imageItemImplementors = []string{"ImageItem"}

func (ec *executionContext) _ImageItem(ctx context.Context, sel ast.SelectionSet, obj *model.ImageItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, imageItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ImageItem")
		case "aspect_ratio":

			out.Values[i] = ec._ImageItem_aspect_ratio(ctx, field, obj)

		case "file_path":

			out.Values[i] = ec._ImageItem_file_path(ctx, field, obj)

		case "height":

			out.Values[i] = ec._ImageItem_height(ctx, field, obj)

		case "iso_639_1":

			out.Values[i] = ec._ImageItem_iso_639_1(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._ImageItem_vote_average(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._ImageItem_vote_count(ctx, field, obj)

		case "width":

			out.Values[i] = ec._ImageItem_width(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var introductionImplementors = []string{"Introduction"}

func (ec *executionContext) _Introduction(ctx context.Context, sel ast.SelectionSet, obj *model.Introduction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, introductionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Introduction")
		case "Name":

			out.Values[i] = ec._Introduction_Name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":

			out.Values[i] = ec._Introduction_Message(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var knownForItemImplementors = []string{"KnownForItem"}

func (ec *executionContext) _KnownForItem(ctx context.Context, sel ast.SelectionSet, obj *model.KnownForItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, knownForItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KnownForItem")
		case "poster_path":

			out.Values[i] = ec._KnownForItem_poster_path(ctx, field, obj)

		case "adult":

			out.Values[i] = ec._KnownForItem_adult(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._KnownForItem_overview(ctx, field, obj)

		case "release_date":

			out.Values[i] = ec._KnownForItem_release_date(ctx, field, obj)

		case "original_title":

			out.Values[i] = ec._KnownForItem_original_title(ctx, field, obj)

		case "genre_ids":

			out.Values[i] = ec._KnownForItem_genre_ids(ctx, field, obj)

		case "id":

			out.Values[i] = ec._KnownForItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "media_type":

			out.Values[i] = ec._KnownForItem_media_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "original_language":

			out.Values[i] = ec._KnownForItem_original_language(ctx, field, obj)

		case "title":

			out.Values[i] = ec._KnownForItem_title(ctx, field, obj)

		case "backdrop_path":

			out.Values[i] = ec._KnownForItem_backdrop_path(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._KnownForItem_popularity(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._KnownForItem_vote_count(ctx, field, obj)

		case "video":

			out.Values[i] = ec._KnownForItem_video(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._KnownForItem_vote_average(ctx, field, obj)

		case "first_air_date":

			out.Values[i] = ec._KnownForItem_first_air_date(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._KnownForItem_origin_country(ctx, field, obj)

		case "name":

			out.Values[i] = ec._KnownForItem_name(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._KnownForItem_original_name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaCreditImplementors = []string{"MediaCredit"}

func (ec *executionContext) _MediaCredit(ctx context.Context, sel ast.SelectionSet, obj *model.MediaCredit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaCreditImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaCredit")
		case "cast":

			out.Values[i] = ec._MediaCredit_cast(ctx, field, obj)

		case "crew":

			out.Values[i] = ec._MediaCredit_crew(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaImagesImplementors = []string{"MediaImages"}

func (ec *executionContext) _MediaImages(ctx context.Context, sel ast.SelectionSet, obj *model.MediaImages) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaImagesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaImages")
		case "backdrops":

			out.Values[i] = ec._MediaImages_backdrops(ctx, field, obj)

		case "posters":

			out.Values[i] = ec._MediaImages_posters(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaVideosImplementors = []string{"MediaVideos"}

func (ec *executionContext) _MediaVideos(ctx context.Context, sel ast.SelectionSet, obj *model.MediaVideos) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaVideosImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaVideos")
		case "results":

			out.Values[i] = ec._MediaVideos_results(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var movieImplementors = []string{"Movie"}

func (ec *executionContext) _Movie(ctx context.Context, sel ast.SelectionSet, obj *model.Movie) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, movieImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Movie")
		case "detail":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_detail(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "popular":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_popular(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "top_rated":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_top_rated(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "upcoming":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Movie_upcoming(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var movieDetailImplementors = []string{"MovieDetail"}

func (ec *executionContext) _MovieDetail(ctx context.Context, sel ast.SelectionSet, obj *model.MovieDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, movieDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MovieDetail")
		case "adult":

			out.Values[i] = ec._MovieDetail_adult(ctx, field, obj)

		case "backdrop_path":

			out.Values[i] = ec._MovieDetail_backdrop_path(ctx, field, obj)

		case "budget":

			out.Values[i] = ec._MovieDetail_budget(ctx, field, obj)

		case "genres":

			out.Values[i] = ec._MovieDetail_genres(ctx, field, obj)

		case "homepage":

			out.Values[i] = ec._MovieDetail_homepage(ctx, field, obj)

		case "id":

			out.Values[i] = ec._MovieDetail_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imdb_id":

			out.Values[i] = ec._MovieDetail_imdb_id(ctx, field, obj)

		case "original_language":

			out.Values[i] = ec._MovieDetail_original_language(ctx, field, obj)

		case "original_title":

			out.Values[i] = ec._MovieDetail_original_title(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._MovieDetail_overview(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._MovieDetail_popularity(ctx, field, obj)

		case "poster_path":

			out.Values[i] = ec._MovieDetail_poster_path(ctx, field, obj)

		case "production_companies":

			out.Values[i] = ec._MovieDetail_production_companies(ctx, field, obj)

		case "production_countries":

			out.Values[i] = ec._MovieDetail_production_countries(ctx, field, obj)

		case "release_date":

			out.Values[i] = ec._MovieDetail_release_date(ctx, field, obj)

		case "revenue":

			out.Values[i] = ec._MovieDetail_revenue(ctx, field, obj)

		case "runtime":

			out.Values[i] = ec._MovieDetail_runtime(ctx, field, obj)

		case "spoken_languages":

			out.Values[i] = ec._MovieDetail_spoken_languages(ctx, field, obj)

		case "status":

			out.Values[i] = ec._MovieDetail_status(ctx, field, obj)

		case "tagline":

			out.Values[i] = ec._MovieDetail_tagline(ctx, field, obj)

		case "title":

			out.Values[i] = ec._MovieDetail_title(ctx, field, obj)

		case "video":

			out.Values[i] = ec._MovieDetail_video(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._MovieDetail_vote_average(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._MovieDetail_vote_count(ctx, field, obj)

		case "credits":

			out.Values[i] = ec._MovieDetail_credits(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videos":

			out.Values[i] = ec._MovieDetail_videos(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "images":

			out.Values[i] = ec._MovieDetail_images(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recommendations":

			out.Values[i] = ec._MovieDetail_recommendations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "similar":

			out.Values[i] = ec._MovieDetail_similar(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imdb_rating":

			out.Values[i] = ec._MovieDetail_imdb_rating(ctx, field, obj)

		case "external_ids":

			out.Values[i] = ec._MovieDetail_external_ids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var movieExternalIdsImplementors = []string{"MovieExternalIds"}

func (ec *executionContext) _MovieExternalIds(ctx context.Context, sel ast.SelectionSet, obj *model.MovieExternalIds) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, movieExternalIdsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MovieExternalIds")
		case "imdb_id":

			out.Values[i] = ec._MovieExternalIds_imdb_id(ctx, field, obj)

		case "facebook_id":

			out.Values[i] = ec._MovieExternalIds_facebook_id(ctx, field, obj)

		case "twitter_id":

			out.Values[i] = ec._MovieExternalIds_twitter_id(ctx, field, obj)

		case "instagram_id":

			out.Values[i] = ec._MovieExternalIds_instagram_id(ctx, field, obj)

		case "wikidata_id":

			out.Values[i] = ec._MovieExternalIds_wikidata_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var movieListImplementors = []string{"MovieList"}

func (ec *executionContext) _MovieList(ctx context.Context, sel ast.SelectionSet, obj *model.MovieList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, movieListImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MovieList")
		case "page":

			out.Values[i] = ec._MovieList_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":

			out.Values[i] = ec._MovieList_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_results":

			out.Values[i] = ec._MovieList_total_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_pages":

			out.Values[i] = ec._MovieList_total_pages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var movieListItemImplementors = []string{"MovieListItem"}

func (ec *executionContext) _MovieListItem(ctx context.Context, sel ast.SelectionSet, obj *model.MovieListItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, movieListItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MovieListItem")
		case "poster_path":

			out.Values[i] = ec._MovieListItem_poster_path(ctx, field, obj)

		case "adult":

			out.Values[i] = ec._MovieListItem_adult(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._MovieListItem_overview(ctx, field, obj)

		case "release_date":

			out.Values[i] = ec._MovieListItem_release_date(ctx, field, obj)

		case "genre_ids":

			out.Values[i] = ec._MovieListItem_genre_ids(ctx, field, obj)

		case "id":

			out.Values[i] = ec._MovieListItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "original_title":

			out.Values[i] = ec._MovieListItem_original_title(ctx, field, obj)

		case "original_language":

			out.Values[i] = ec._MovieListItem_original_language(ctx, field, obj)

		case "title":

			out.Values[i] = ec._MovieListItem_title(ctx, field, obj)

		case "backdrop_path":

			out.Values[i] = ec._MovieListItem_backdrop_path(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._MovieListItem_popularity(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._MovieListItem_vote_count(ctx, field, obj)

		case "video":

			out.Values[i] = ec._MovieListItem_video(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._MovieListItem_vote_average(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var networkImplementors = []string{"Network"}

func (ec *executionContext) _Network(ctx context.Context, sel ast.SelectionSet, obj *model.Network) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, networkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Network")
		case "name":

			out.Values[i] = ec._Network_name(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Network_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logo_path":

			out.Values[i] = ec._Network_logo_path(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._Network_origin_country(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var peopleImplementors = []string{"People"}

func (ec *executionContext) _People(ctx context.Context, sel ast.SelectionSet, obj *model.People) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, peopleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("People")
		case "detail":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._People_detail(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "popular":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._People_popular(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personCreditCastImplementors = []string{"PersonCreditCast"}

func (ec *executionContext) _PersonCreditCast(ctx context.Context, sel ast.SelectionSet, obj *model.PersonCreditCast) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personCreditCastImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonCreditCast")
		case "id":

			out.Values[i] = ec._PersonCreditCast_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "original_language":

			out.Values[i] = ec._PersonCreditCast_original_language(ctx, field, obj)

		case "episode_count":

			out.Values[i] = ec._PersonCreditCast_episode_count(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._PersonCreditCast_overview(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._PersonCreditCast_origin_country(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._PersonCreditCast_original_name(ctx, field, obj)

		case "genre_ids":

			out.Values[i] = ec._PersonCreditCast_genre_ids(ctx, field, obj)

		case "name":

			out.Values[i] = ec._PersonCreditCast_name(ctx, field, obj)

		case "media_type":

			out.Values[i] = ec._PersonCreditCast_media_type(ctx, field, obj)

		case "poster_path":

			out.Values[i] = ec._PersonCreditCast_poster_path(ctx, field, obj)

		case "first_air_date":

			out.Values[i] = ec._PersonCreditCast_first_air_date(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._PersonCreditCast_vote_average(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._PersonCreditCast_vote_count(ctx, field, obj)

		case "character":

			out.Values[i] = ec._PersonCreditCast_character(ctx, field, obj)

		case "backdrop_path":

			out.Values[i] = ec._PersonCreditCast_backdrop_path(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._PersonCreditCast_popularity(ctx, field, obj)

		case "credit_id":

			out.Values[i] = ec._PersonCreditCast_credit_id(ctx, field, obj)

		case "original_title":

			out.Values[i] = ec._PersonCreditCast_original_title(ctx, field, obj)

		case "video":

			out.Values[i] = ec._PersonCreditCast_video(ctx, field, obj)

		case "release_date":

			out.Values[i] = ec._PersonCreditCast_release_date(ctx, field, obj)

		case "title":

			out.Values[i] = ec._PersonCreditCast_title(ctx, field, obj)

		case "adult":

			out.Values[i] = ec._PersonCreditCast_adult(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personCreditCrewImplementors = []string{"PersonCreditCrew"}

func (ec *executionContext) _PersonCreditCrew(ctx context.Context, sel ast.SelectionSet, obj *model.PersonCreditCrew) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personCreditCrewImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonCreditCrew")
		case "id":

			out.Values[i] = ec._PersonCreditCrew_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "department":

			out.Values[i] = ec._PersonCreditCrew_department(ctx, field, obj)

		case "original_language":

			out.Values[i] = ec._PersonCreditCrew_original_language(ctx, field, obj)

		case "episode_count":

			out.Values[i] = ec._PersonCreditCrew_episode_count(ctx, field, obj)

		case "job":

			out.Values[i] = ec._PersonCreditCrew_job(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._PersonCreditCrew_overview(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._PersonCreditCrew_origin_country(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._PersonCreditCrew_original_name(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._PersonCreditCrew_vote_count(ctx, field, obj)

		case "name":

			out.Values[i] = ec._PersonCreditCrew_name(ctx, field, obj)

		case "media_type":

			out.Values[i] = ec._PersonCreditCrew_media_type(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._PersonCreditCrew_popularity(ctx, field, obj)

		case "credit_id":

			out.Values[i] = ec._PersonCreditCrew_credit_id(ctx, field, obj)

		case "backdrop_path":

			out.Values[i] = ec._PersonCreditCrew_backdrop_path(ctx, field, obj)

		case "first_air_date":

			out.Values[i] = ec._PersonCreditCrew_first_air_date(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._PersonCreditCrew_vote_average(ctx, field, obj)

		case "genre_ids":

			out.Values[i] = ec._PersonCreditCrew_genre_ids(ctx, field, obj)

		case "poster_path":

			out.Values[i] = ec._PersonCreditCrew_poster_path(ctx, field, obj)

		case "original_title":

			out.Values[i] = ec._PersonCreditCrew_original_title(ctx, field, obj)

		case "video":

			out.Values[i] = ec._PersonCreditCrew_video(ctx, field, obj)

		case "title":

			out.Values[i] = ec._PersonCreditCrew_title(ctx, field, obj)

		case "adult":

			out.Values[i] = ec._PersonCreditCrew_adult(ctx, field, obj)

		case "release_date":

			out.Values[i] = ec._PersonCreditCrew_release_date(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personCreditsImplementors = []string{"PersonCredits"}

func (ec *executionContext) _PersonCredits(ctx context.Context, sel ast.SelectionSet, obj *model.PersonCredits) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personCreditsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonCredits")
		case "cast":

			out.Values[i] = ec._PersonCredits_cast(ctx, field, obj)

		case "crew":

			out.Values[i] = ec._PersonCredits_crew(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personDetailImplementors = []string{"PersonDetail"}

func (ec *executionContext) _PersonDetail(ctx context.Context, sel ast.SelectionSet, obj *model.PersonDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonDetail")
		case "birthday":

			out.Values[i] = ec._PersonDetail_birthday(ctx, field, obj)

		case "known_for_department":

			out.Values[i] = ec._PersonDetail_known_for_department(ctx, field, obj)

		case "deathday":

			out.Values[i] = ec._PersonDetail_deathday(ctx, field, obj)

		case "id":

			out.Values[i] = ec._PersonDetail_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._PersonDetail_name(ctx, field, obj)

		case "also_known_as":

			out.Values[i] = ec._PersonDetail_also_known_as(ctx, field, obj)

		case "gender":

			out.Values[i] = ec._PersonDetail_gender(ctx, field, obj)

		case "biography":

			out.Values[i] = ec._PersonDetail_biography(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._PersonDetail_popularity(ctx, field, obj)

		case "place_of_birth":

			out.Values[i] = ec._PersonDetail_place_of_birth(ctx, field, obj)

		case "profile_path":

			out.Values[i] = ec._PersonDetail_profile_path(ctx, field, obj)

		case "adult":

			out.Values[i] = ec._PersonDetail_adult(ctx, field, obj)

		case "imdb_id":

			out.Values[i] = ec._PersonDetail_imdb_id(ctx, field, obj)

		case "homepage":

			out.Values[i] = ec._PersonDetail_homepage(ctx, field, obj)

		case "external_ids":

			out.Values[i] = ec._PersonDetail_external_ids(ctx, field, obj)

		case "images":

			out.Values[i] = ec._PersonDetail_images(ctx, field, obj)

		case "combined_credits":

			out.Values[i] = ec._PersonDetail_combined_credits(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personExternalIdsImplementors = []string{"PersonExternalIds"}

func (ec *executionContext) _PersonExternalIds(ctx context.Context, sel ast.SelectionSet, obj *model.PersonExternalIds) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personExternalIdsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonExternalIds")
		case "imdb_id":

			out.Values[i] = ec._PersonExternalIds_imdb_id(ctx, field, obj)

		case "facebook_id":

			out.Values[i] = ec._PersonExternalIds_facebook_id(ctx, field, obj)

		case "freebase_mid":

			out.Values[i] = ec._PersonExternalIds_freebase_mid(ctx, field, obj)

		case "freebase_id":

			out.Values[i] = ec._PersonExternalIds_freebase_id(ctx, field, obj)

		case "tvrage_id":

			out.Values[i] = ec._PersonExternalIds_tvrage_id(ctx, field, obj)

		case "twitter_id":

			out.Values[i] = ec._PersonExternalIds_twitter_id(ctx, field, obj)

		case "instagram_id":

			out.Values[i] = ec._PersonExternalIds_instagram_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var personImagesImplementors = []string{"PersonImages"}

func (ec *executionContext) _PersonImages(ctx context.Context, sel ast.SelectionSet, obj *model.PersonImages) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, personImagesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PersonImages")
		case "profiles":

			out.Values[i] = ec._PersonImages_profiles(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var popularPeopleImplementors = []string{"PopularPeople"}

func (ec *executionContext) _PopularPeople(ctx context.Context, sel ast.SelectionSet, obj *model.PopularPeople) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, popularPeopleImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PopularPeople")
		case "page":

			out.Values[i] = ec._PopularPeople_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":

			out.Values[i] = ec._PopularPeople_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_results":

			out.Values[i] = ec._PopularPeople_total_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_pages":

			out.Values[i] = ec._PopularPeople_total_pages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var popularPersonImplementors = []string{"PopularPerson"}

func (ec *executionContext) _PopularPerson(ctx context.Context, sel ast.SelectionSet, obj *model.PopularPerson) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, popularPersonImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PopularPerson")
		case "profile_path":

			out.Values[i] = ec._PopularPerson_profile_path(ctx, field, obj)

		case "adult":

			out.Values[i] = ec._PopularPerson_adult(ctx, field, obj)

		case "id":

			out.Values[i] = ec._PopularPerson_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "known_for":

			out.Values[i] = ec._PopularPerson_known_for(ctx, field, obj)

		case "name":

			out.Values[i] = ec._PopularPerson_name(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._PopularPerson_popularity(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productionCompanyImplementors = []string{"ProductionCompany"}

func (ec *executionContext) _ProductionCompany(ctx context.Context, sel ast.SelectionSet, obj *model.ProductionCompany) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productionCompanyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductionCompany")
		case "name":

			out.Values[i] = ec._ProductionCompany_name(ctx, field, obj)

		case "id":

			out.Values[i] = ec._ProductionCompany_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "logo_path":

			out.Values[i] = ec._ProductionCompany_logo_path(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._ProductionCompany_origin_country(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productionCountryImplementors = []string{"ProductionCountry"}

func (ec *executionContext) _ProductionCountry(ctx context.Context, sel ast.SelectionSet, obj *model.ProductionCountry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productionCountryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductionCountry")
		case "iso_3166_1":

			out.Values[i] = ec._ProductionCountry_iso_3166_1(ctx, field, obj)

		case "name":

			out.Values[i] = ec._ProductionCountry_name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "introduction":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_introduction(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "movie":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_movie(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "people":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_people(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "trending":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_trending(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "tv":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tv(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var seasonImplementors = []string{"Season"}

func (ec *executionContext) _Season(ctx context.Context, sel ast.SelectionSet, obj *model.Season) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seasonImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Season")
		case "air_date":

			out.Values[i] = ec._Season_air_date(ctx, field, obj)

		case "episode_count":

			out.Values[i] = ec._Season_episode_count(ctx, field, obj)

		case "id":

			out.Values[i] = ec._Season_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Season_name(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._Season_overview(ctx, field, obj)

		case "poster_path":

			out.Values[i] = ec._Season_poster_path(ctx, field, obj)

		case "season_number":

			out.Values[i] = ec._Season_season_number(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var spokenLanguageImplementors = []string{"SpokenLanguage"}

func (ec *executionContext) _SpokenLanguage(ctx context.Context, sel ast.SelectionSet, obj *model.SpokenLanguage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, spokenLanguageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpokenLanguage")
		case "iso_639_1":

			out.Values[i] = ec._SpokenLanguage_iso_639_1(ctx, field, obj)

		case "name":

			out.Values[i] = ec._SpokenLanguage_name(ctx, field, obj)

		case "english_name":

			out.Values[i] = ec._SpokenLanguage_english_name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tVImplementors = []string{"TV"}

func (ec *executionContext) _TV(ctx context.Context, sel ast.SelectionSet, obj *model.Tv) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tVImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TV")
		case "detail":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TV_detail(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "popular":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TV_popular(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "top_rated":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TV_top_rated(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "on_the_air":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TV_on_the_air(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tVDetailImplementors = []string{"TVDetail"}

func (ec *executionContext) _TVDetail(ctx context.Context, sel ast.SelectionSet, obj *model.TVDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tVDetailImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TVDetail")
		case "backdrop_path":

			out.Values[i] = ec._TVDetail_backdrop_path(ctx, field, obj)

		case "created_by":

			out.Values[i] = ec._TVDetail_created_by(ctx, field, obj)

		case "episode_runtime":

			out.Values[i] = ec._TVDetail_episode_runtime(ctx, field, obj)

		case "first_air_date":

			out.Values[i] = ec._TVDetail_first_air_date(ctx, field, obj)

		case "genres":

			out.Values[i] = ec._TVDetail_genres(ctx, field, obj)

		case "homepage":

			out.Values[i] = ec._TVDetail_homepage(ctx, field, obj)

		case "id":

			out.Values[i] = ec._TVDetail_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "in_production":

			out.Values[i] = ec._TVDetail_in_production(ctx, field, obj)

		case "languages":

			out.Values[i] = ec._TVDetail_languages(ctx, field, obj)

		case "last_air_date":

			out.Values[i] = ec._TVDetail_last_air_date(ctx, field, obj)

		case "last_episode_to_air":

			out.Values[i] = ec._TVDetail_last_episode_to_air(ctx, field, obj)

		case "name":

			out.Values[i] = ec._TVDetail_name(ctx, field, obj)

		case "networks":

			out.Values[i] = ec._TVDetail_networks(ctx, field, obj)

		case "number_of_episodes":

			out.Values[i] = ec._TVDetail_number_of_episodes(ctx, field, obj)

		case "number_of_seasons":

			out.Values[i] = ec._TVDetail_number_of_seasons(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._TVDetail_origin_country(ctx, field, obj)

		case "original_language":

			out.Values[i] = ec._TVDetail_original_language(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._TVDetail_original_name(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._TVDetail_overview(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._TVDetail_popularity(ctx, field, obj)

		case "poster_path":

			out.Values[i] = ec._TVDetail_poster_path(ctx, field, obj)

		case "production_companies":

			out.Values[i] = ec._TVDetail_production_companies(ctx, field, obj)

		case "production_countries":

			out.Values[i] = ec._TVDetail_production_countries(ctx, field, obj)

		case "seasons":

			out.Values[i] = ec._TVDetail_seasons(ctx, field, obj)

		case "spoken_languages":

			out.Values[i] = ec._TVDetail_spoken_languages(ctx, field, obj)

		case "status":

			out.Values[i] = ec._TVDetail_status(ctx, field, obj)

		case "tagline":

			out.Values[i] = ec._TVDetail_tagline(ctx, field, obj)

		case "type":

			out.Values[i] = ec._TVDetail_type(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._TVDetail_vote_average(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._TVDetail_vote_count(ctx, field, obj)

		case "credits":

			out.Values[i] = ec._TVDetail_credits(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "videos":

			out.Values[i] = ec._TVDetail_videos(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "images":

			out.Values[i] = ec._TVDetail_images(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recommendations":

			out.Values[i] = ec._TVDetail_recommendations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "similar":

			out.Values[i] = ec._TVDetail_similar(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imdb_rating":

			out.Values[i] = ec._TVDetail_imdb_rating(ctx, field, obj)

		case "external_ids":

			out.Values[i] = ec._TVDetail_external_ids(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tVExternalIdsImplementors = []string{"TVExternalIds"}

func (ec *executionContext) _TVExternalIds(ctx context.Context, sel ast.SelectionSet, obj *model.TVExternalIds) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tVExternalIdsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TVExternalIds")
		case "imdb_id":

			out.Values[i] = ec._TVExternalIds_imdb_id(ctx, field, obj)

		case "freebase_mid":

			out.Values[i] = ec._TVExternalIds_freebase_mid(ctx, field, obj)

		case "freebase_id":

			out.Values[i] = ec._TVExternalIds_freebase_id(ctx, field, obj)

		case "tvdb_id":

			out.Values[i] = ec._TVExternalIds_tvdb_id(ctx, field, obj)

		case "tvrage_id":

			out.Values[i] = ec._TVExternalIds_tvrage_id(ctx, field, obj)

		case "facebook_id":

			out.Values[i] = ec._TVExternalIds_facebook_id(ctx, field, obj)

		case "instagram_id":

			out.Values[i] = ec._TVExternalIds_instagram_id(ctx, field, obj)

		case "twitter_id":

			out.Values[i] = ec._TVExternalIds_twitter_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tVListImplementors = []string{"TVList"}

func (ec *executionContext) _TVList(ctx context.Context, sel ast.SelectionSet, obj *model.TVList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tVListImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TVList")
		case "page":

			out.Values[i] = ec._TVList_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":

			out.Values[i] = ec._TVList_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_results":

			out.Values[i] = ec._TVList_total_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_pages":

			out.Values[i] = ec._TVList_total_pages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tVListItemImplementors = []string{"TVListItem"}

func (ec *executionContext) _TVListItem(ctx context.Context, sel ast.SelectionSet, obj *model.TVListItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tVListItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TVListItem")
		case "poster_path":

			out.Values[i] = ec._TVListItem_poster_path(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._TVListItem_popularity(ctx, field, obj)

		case "id":

			out.Values[i] = ec._TVListItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "backdrop_path":

			out.Values[i] = ec._TVListItem_backdrop_path(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._TVListItem_vote_average(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._TVListItem_overview(ctx, field, obj)

		case "first_air_date":

			out.Values[i] = ec._TVListItem_first_air_date(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._TVListItem_origin_country(ctx, field, obj)

		case "genre_ids":

			out.Values[i] = ec._TVListItem_genre_ids(ctx, field, obj)

		case "original_language":

			out.Values[i] = ec._TVListItem_original_language(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._TVListItem_vote_count(ctx, field, obj)

		case "name":

			out.Values[i] = ec._TVListItem_name(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._TVListItem_original_name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendingImplementors = []string{"Trending"}

func (ec *executionContext) _Trending(ctx context.Context, sel ast.SelectionSet, obj *model.Trending) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Trending")
		case "page":

			out.Values[i] = ec._Trending_page(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "results":

			out.Values[i] = ec._Trending_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_pages":

			out.Values[i] = ec._Trending_total_pages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "total_results":

			out.Values[i] = ec._Trending_total_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var trendingItemImplementors = []string{"TrendingItem"}

func (ec *executionContext) _TrendingItem(ctx context.Context, sel ast.SelectionSet, obj *model.TrendingItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, trendingItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TrendingItem")
		case "poster_path":

			out.Values[i] = ec._TrendingItem_poster_path(ctx, field, obj)

		case "adult":

			out.Values[i] = ec._TrendingItem_adult(ctx, field, obj)

		case "overview":

			out.Values[i] = ec._TrendingItem_overview(ctx, field, obj)

		case "release_date":

			out.Values[i] = ec._TrendingItem_release_date(ctx, field, obj)

		case "genre_ids":

			out.Values[i] = ec._TrendingItem_genre_ids(ctx, field, obj)

		case "id":

			out.Values[i] = ec._TrendingItem_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "original_title":

			out.Values[i] = ec._TrendingItem_original_title(ctx, field, obj)

		case "original_language":

			out.Values[i] = ec._TrendingItem_original_language(ctx, field, obj)

		case "title":

			out.Values[i] = ec._TrendingItem_title(ctx, field, obj)

		case "backdrop_path":

			out.Values[i] = ec._TrendingItem_backdrop_path(ctx, field, obj)

		case "popularity":

			out.Values[i] = ec._TrendingItem_popularity(ctx, field, obj)

		case "vote_count":

			out.Values[i] = ec._TrendingItem_vote_count(ctx, field, obj)

		case "video":

			out.Values[i] = ec._TrendingItem_video(ctx, field, obj)

		case "vote_average":

			out.Values[i] = ec._TrendingItem_vote_average(ctx, field, obj)

		case "first_air_date":

			out.Values[i] = ec._TrendingItem_first_air_date(ctx, field, obj)

		case "origin_country":

			out.Values[i] = ec._TrendingItem_origin_country(ctx, field, obj)

		case "name":

			out.Values[i] = ec._TrendingItem_name(ctx, field, obj)

		case "original_name":

			out.Values[i] = ec._TrendingItem_original_name(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var videoItemImplementors = []string{"VideoItem"}

func (ec *executionContext) _VideoItem(ctx context.Context, sel ast.SelectionSet, obj *model.VideoItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, videoItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VideoItem")
		case "iso_639_1":

			out.Values[i] = ec._VideoItem_iso_639_1(ctx, field, obj)

		case "iso_3166_1":

			out.Values[i] = ec._VideoItem_iso_3166_1(ctx, field, obj)

		case "name":

			out.Values[i] = ec._VideoItem_name(ctx, field, obj)

		case "key":

			out.Values[i] = ec._VideoItem_key(ctx, field, obj)

		case "site":

			out.Values[i] = ec._VideoItem_site(ctx, field, obj)

		case "size":

			out.Values[i] = ec._VideoItem_size(ctx, field, obj)

		case "type":

			out.Values[i] = ec._VideoItem_type(ctx, field, obj)

		case "official":

			out.Values[i] = ec._VideoItem_official(ctx, field, obj)

		case "published_at":

			out.Values[i] = ec._VideoItem_published_at(ctx, field, obj)

		case "id":

			out.Values[i] = ec._VideoItem_id(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCreatedBy2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreatedBy(ctx context.Context, sel ast.SelectionSet, v *model.CreatedBy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreatedBy(ctx, sel, v)
}

func (ec *executionContext) marshalNCreditCastItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCastItem(ctx context.Context, sel ast.SelectionSet, v *model.CreditCastItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreditCastItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCreditCrewItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCrewItem(ctx context.Context, sel ast.SelectionSet, v *model.CreditCrewItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CreditCrewItem(ctx, sel, v)
}

func (ec *executionContext) marshalNGenre2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐGenre(ctx context.Context, sel ast.SelectionSet, v *model.Genre) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Genre(ctx, sel, v)
}

func (ec *executionContext) marshalNImageItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐImageItem(ctx context.Context, sel ast.SelectionSet, v *model.ImageItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ImageItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNIntroduction2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐIntroduction(ctx context.Context, sel ast.SelectionSet, v model.Introduction) graphql.Marshaler {
	return ec._Introduction(ctx, sel, &v)
}

func (ec *executionContext) marshalNIntroduction2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐIntroduction(ctx context.Context, sel ast.SelectionSet, v *model.Introduction) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Introduction(ctx, sel, v)
}

func (ec *executionContext) marshalNKnownForItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐKnownForItem(ctx context.Context, sel ast.SelectionSet, v *model.KnownForItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._KnownForItem(ctx, sel, v)
}

func (ec *executionContext) marshalNMediaCredit2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaCredit(ctx context.Context, sel ast.SelectionSet, v *model.MediaCredit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaCredit(ctx, sel, v)
}

func (ec *executionContext) marshalNMediaImages2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaImages(ctx context.Context, sel ast.SelectionSet, v *model.MediaImages) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaImages(ctx, sel, v)
}

func (ec *executionContext) marshalNMediaVideos2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMediaVideos(ctx context.Context, sel ast.SelectionSet, v *model.MediaVideos) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MediaVideos(ctx, sel, v)
}

func (ec *executionContext) marshalNMovie2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovie(ctx context.Context, sel ast.SelectionSet, v model.Movie) graphql.Marshaler {
	return ec._Movie(ctx, sel, &v)
}

func (ec *executionContext) marshalNMovie2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovie(ctx context.Context, sel ast.SelectionSet, v *model.Movie) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Movie(ctx, sel, v)
}

func (ec *executionContext) marshalNMovieDetail2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieDetail(ctx context.Context, sel ast.SelectionSet, v model.MovieDetail) graphql.Marshaler {
	return ec._MovieDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNMovieDetail2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieDetail(ctx context.Context, sel ast.SelectionSet, v *model.MovieDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MovieDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNMovieList2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieList(ctx context.Context, sel ast.SelectionSet, v model.MovieList) graphql.Marshaler {
	return ec._MovieList(ctx, sel, &v)
}

func (ec *executionContext) marshalNMovieList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieList(ctx context.Context, sel ast.SelectionSet, v *model.MovieList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MovieList(ctx, sel, v)
}

func (ec *executionContext) marshalNMovieListItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieListItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.MovieListItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMovieListItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieListItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMovieListItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieListItem(ctx context.Context, sel ast.SelectionSet, v *model.MovieListItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MovieListItem(ctx, sel, v)
}

func (ec *executionContext) marshalNNetwork2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐNetwork(ctx context.Context, sel ast.SelectionSet, v *model.Network) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Network(ctx, sel, v)
}

func (ec *executionContext) marshalNPeople2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPeople(ctx context.Context, sel ast.SelectionSet, v model.People) graphql.Marshaler {
	return ec._People(ctx, sel, &v)
}

func (ec *executionContext) marshalNPeople2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPeople(ctx context.Context, sel ast.SelectionSet, v *model.People) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._People(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonCreditCast2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCast(ctx context.Context, sel ast.SelectionSet, v *model.PersonCreditCast) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PersonCreditCast(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonCreditCrew2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCrew(ctx context.Context, sel ast.SelectionSet, v *model.PersonCreditCrew) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PersonCreditCrew(ctx, sel, v)
}

func (ec *executionContext) marshalNPersonDetail2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonDetail(ctx context.Context, sel ast.SelectionSet, v model.PersonDetail) graphql.Marshaler {
	return ec._PersonDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNPersonDetail2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonDetail(ctx context.Context, sel ast.SelectionSet, v *model.PersonDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PersonDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNPopularPeople2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPopularPeople(ctx context.Context, sel ast.SelectionSet, v model.PopularPeople) graphql.Marshaler {
	return ec._PopularPeople(ctx, sel, &v)
}

func (ec *executionContext) marshalNPopularPeople2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPopularPeople(ctx context.Context, sel ast.SelectionSet, v *model.PopularPeople) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PopularPeople(ctx, sel, v)
}

func (ec *executionContext) marshalNPopularPerson2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPopularPersonᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PopularPerson) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPopularPerson2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPopularPerson(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPopularPerson2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPopularPerson(ctx context.Context, sel ast.SelectionSet, v *model.PopularPerson) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PopularPerson(ctx, sel, v)
}

func (ec *executionContext) marshalNProductionCompany2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCompany(ctx context.Context, sel ast.SelectionSet, v *model.ProductionCompany) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductionCompany(ctx, sel, v)
}

func (ec *executionContext) marshalNProductionCountry2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCountry(ctx context.Context, sel ast.SelectionSet, v *model.ProductionCountry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductionCountry(ctx, sel, v)
}

func (ec *executionContext) marshalNSeason2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSeason(ctx context.Context, sel ast.SelectionSet, v *model.Season) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Season(ctx, sel, v)
}

func (ec *executionContext) marshalNSpokenLanguage2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSpokenLanguage(ctx context.Context, sel ast.SelectionSet, v *model.SpokenLanguage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SpokenLanguage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTV2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTv(ctx context.Context, sel ast.SelectionSet, v model.Tv) graphql.Marshaler {
	return ec._TV(ctx, sel, &v)
}

func (ec *executionContext) marshalNTV2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTv(ctx context.Context, sel ast.SelectionSet, v *model.Tv) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TV(ctx, sel, v)
}

func (ec *executionContext) marshalNTVDetail2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVDetail(ctx context.Context, sel ast.SelectionSet, v model.TVDetail) graphql.Marshaler {
	return ec._TVDetail(ctx, sel, &v)
}

func (ec *executionContext) marshalNTVDetail2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVDetail(ctx context.Context, sel ast.SelectionSet, v *model.TVDetail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TVDetail(ctx, sel, v)
}

func (ec *executionContext) marshalNTVList2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVList(ctx context.Context, sel ast.SelectionSet, v model.TVList) graphql.Marshaler {
	return ec._TVList(ctx, sel, &v)
}

func (ec *executionContext) marshalNTVList2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVList(ctx context.Context, sel ast.SelectionSet, v *model.TVList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TVList(ctx, sel, v)
}

func (ec *executionContext) marshalNTVListItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVListItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TVListItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTVListItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVListItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTVListItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVListItem(ctx context.Context, sel ast.SelectionSet, v *model.TVListItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TVListItem(ctx, sel, v)
}

func (ec *executionContext) marshalNTrending2githubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTrending(ctx context.Context, sel ast.SelectionSet, v model.Trending) graphql.Marshaler {
	return ec._Trending(ctx, sel, &v)
}

func (ec *executionContext) marshalNTrending2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTrending(ctx context.Context, sel ast.SelectionSet, v *model.Trending) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Trending(ctx, sel, v)
}

func (ec *executionContext) marshalNTrendingItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTrendingItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TrendingItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTrendingItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTrendingItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTrendingItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTrendingItem(ctx context.Context, sel ast.SelectionSet, v *model.TrendingItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TrendingItem(ctx, sel, v)
}

func (ec *executionContext) marshalNVideoItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐVideoItem(ctx context.Context, sel ast.SelectionSet, v *model.VideoItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._VideoItem(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCreatedBy2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreatedByᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CreatedBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCreatedBy2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreatedBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCreditCastItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCastItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CreditCastItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCreditCastItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCastItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCreditCrewItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCrewItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CreditCrewItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCreditCrewItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐCreditCrewItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEpisode2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐEpisode(ctx context.Context, sel ast.SelectionSet, v *model.Episode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Episode(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGenre2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐGenreᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Genre) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGenre2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐGenre(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOIMDBRating2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐIMDBRating(ctx context.Context, sel ast.SelectionSet, v *model.IMDBRating) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IMDBRating(ctx, sel, v)
}

func (ec *executionContext) marshalOImageItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐImageItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ImageItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNImageItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐImageItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOKnownForItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐKnownForItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.KnownForItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNKnownForItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐKnownForItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMovieExternalIds2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐMovieExternalIds(ctx context.Context, sel ast.SelectionSet, v *model.MovieExternalIds) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MovieExternalIds(ctx, sel, v)
}

func (ec *executionContext) marshalONetwork2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐNetworkᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Network) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNetwork2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐNetwork(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPersonCreditCast2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCastᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PersonCreditCast) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPersonCreditCast2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCast(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPersonCreditCrew2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCrewᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.PersonCreditCrew) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPersonCreditCrew2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCreditCrew(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOPersonCredits2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonCredits(ctx context.Context, sel ast.SelectionSet, v *model.PersonCredits) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonCredits(ctx, sel, v)
}

func (ec *executionContext) marshalOPersonExternalIds2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonExternalIds(ctx context.Context, sel ast.SelectionSet, v *model.PersonExternalIds) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonExternalIds(ctx, sel, v)
}

func (ec *executionContext) marshalOPersonImages2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐPersonImages(ctx context.Context, sel ast.SelectionSet, v *model.PersonImages) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PersonImages(ctx, sel, v)
}

func (ec *executionContext) marshalOProductionCompany2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductionCompany) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductionCompany2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOProductionCountry2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCountryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ProductionCountry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNProductionCountry2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐProductionCountry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSeason2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSeasonᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Season) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSeason2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSeason(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSpokenLanguage2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSpokenLanguageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SpokenLanguage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSpokenLanguage2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐSpokenLanguage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTVExternalIds2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐTVExternalIds(ctx context.Context, sel ast.SelectionSet, v *model.TVExternalIds) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TVExternalIds(ctx, sel, v)
}

func (ec *executionContext) marshalOVideoItem2ᚕᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐVideoItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.VideoItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNVideoItem2ᚖgithubᚗcomᚋctuanleᚋsorapqlᚋgraphᚋmodelᚐVideoItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
