type MovieListItem {
  poster_path: String
  adult: Boolean
  overview: String
  release_date: String
  genre_ids: [Int]
  id: Int!
  original_title: String
  original_language: String
  title: String
  backdrop_path: String
  popularity: Float
  vote_count: Int
  video: Boolean
  vote_average: Float
}

type MovieList {
  page: Int!
  results: [MovieListItem!]!
  total_results: Int!
  total_pages: Int!
}

type MovieExternalIds {
  imdb_id: String
  facebook_id: String
  twitter_id: String
  instagram_id: String
  wikidata_id: String
}

type MovieDetail {
  adult: Boolean
  backdrop_path: String
  budget: Int
  genres: [Genre!]
  homepage: String
  id: Int!
  imdb_id: String
  original_language: String
  original_title: String
  overview: String
  popularity: Float
  poster_path: String
  production_companies: [ProductionCompany!]
  production_countries: [ProductionCountry!]
  release_date: String
  revenue: Int
  runtime: Int
  spoken_languages: [SpokenLanguage!]
  status: String
  tagline: String
  title: String
  video: Boolean
  vote_average: Float
  vote_count: Int
  credits: MediaCredit!
  videos: MediaVideos!
  images: MediaImages!
  recommendations(page: Int): MovieList!
  similar(page: Int): MovieList!
  imdb_rating: IMDBRating
  external_ids: MovieExternalIds
}

type Movie {
  detail(id: Int!, language: String): MovieDetail!
  popular(page: Int, language: String, region: String): MovieList!
  top_rated(page: Int, language: String, region: String): MovieList!
  upcoming(page: Int, language: String, region: String): MovieList!
}

extend type Query {
  movie: Movie!
}
